package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.*;
import com.language.exceptions.*;

terminal String NULL;

terminal String POINT;
terminal String SEMICOLON;
terminal String COMMA;
terminal String LEFT_ROUND_BRACKET;
terminal String RIGHT_ROUND_BRACKET;
terminal String DOUBLE_QUOTE;
terminal String SINGLE_QUOTE;
terminal String LEFT_SQUARE_BRACKET;
terminal String RIGHT_SQUARE_BRACKET;
terminal String VAR;

terminal String LINE_BREAK;
terminal String TABULATION;
terminal String ESCAPE;

terminal String PLUS;
terminal String MINUS;
terminal String TIMES;
terminal String DIV;
terminal String EQUAL;

terminal String INCREMENT;
terminal String DECREMENT;

terminal String TRUE;
terminal String FALSE;

terminal String AND;
terminal String OR;
terminal String NOT;

terminal String GREATER;
terminal String LESS;
terminal String GREATER_EQUAL;
terminal String LESS_EQUAL;
terminal String EQUAL_EQUAL;
terminal String NOT_EQUAL;

terminal String BLOCK_BEGIN;
terminal String IF;
terminal String ELSE;
terminal String FOR;
terminal String BREAK;
terminal String CONTINUE;

terminal String LENGTH_FUNCT;
terminal String CONCAT_FUNCT;
terminal String TO_UPPER_CASE_FUNCT;
terminal String TO_LOWER_CASE_FUNCT;
terminal String CHAR_AT_FUNCT;
terminal String INDEX_OF_FUNCT;
terminal String LAST_INDEX_OF_FUNCT;
terminal String SUBSTRING_FUNCT;
terminal String SPLIT_FUNCT;

terminal String JOIN_FUNCT;
terminal String POP_FUNCT;
terminal String PUSH_FUNCT;
terminal String SHIFT_FUNCT;
terminal String REVERSE_FUNCT;

terminal String NAN;
terminal String IS_NAN;
terminal String PARSE_FUNCT;

terminal String STRING;

terminal String ID;
terminal String INTEGRAL;
terminal String DECIMAL;

non terminal Expression simple_expression;

non terminal Object variable_definition;
non terminal Object variable_declaration_list;
non terminal Object variable_declaration;
non terminal Object variable_initializer;

non terminal Object empty_statement;

non terminal ArrayLiteral array_literal;
non terminal ElementList element_list;
non terminal LiteralElement literal_element;

precedence left PLUS, MINUS;
precedence left TIMES, DIV;

/* Parsing de Definiciones de Variables */

variable_definition ::= 
    VAR variable_declaration_list;

variable_declaration_list ::=
    variable_declaration |
    variable_declaration_list COMMA variable_declaration;

variable_declaration ::= 
    ID:id 
        {:  
            Variables variables = Variables.getInstance();
            Var var = new Var(null, id, null);
            variables.addVariable(var); 
        :} |
    ID:id EQUAL TRUE:t 
        {:  
            Variables variables = Variables.getInstance();
            Var var = new Var(t, id, "boolean");
            variables.addVariable(var); 
        :} |
    ID:id EQUAL FALSE:f
        {:  
            Variables variables = Variables.getInstance();
            Var var = new Var(f, id, "boolean");
            variables.addVariable(var); 
        :} | 
    ID:id EQUAL simple_expression:s
        {:  
            Variables variables = Variables.getInstance();
            String type = s.evaluateType();
            Object value = s.evaluate();
            Var var = new Var(value, id, type);
            variables.addVariable(var); 
        :};


/* Expresiones */
simple_expression ::=
    INTEGRAL:i
        {:
            RESULT = new Expression(i);
        :} |
    DECIMAL:d
        {:
            RESULT = new Expression(d);
        :} |
    STRING:s
        {:
            RESULT = new Expression(s);
        :} |
    simple_expression:l PLUS simple_expression:r
        {:
            RESULT = new Expression("+", l, r);
        :} |
    simple_expression:l MINUS simple_expression:r
        {:
            RESULT = new Expression("-", l, r);
        :} |
    simple_expression:l TIMES simple_expression:r
        {:
            RESULT = new Expression("*", l, r);
        :} |
    simple_expression:l DIV simple_expression:r
        {:
            RESULT = new Expression("/", l, r);
        :} |
    ID:i
        {:
            RESULT = new Expression(i);
        :} |
    LEFT_ROUND_BRACKET simple_expression:e RIGHT_ROUND_BRACKET
        {:
            RESULT = e;
        :};

/* Parsing de Arrays 

array_literal ::=
    LEFT_SQUARE_BRACKETS RIGHT_SQUARE_BRACKETS |
    LEFT_SQUARE_BRACKETS element_list RIGHT_SQUARE_BRACKETS
    ;

element_list ::=
    literal_element |
    element_list COMMA literal_element
    ;

literal_element	::= NULL;

*/