package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.expression.*;
import com.language.model.declaration.*;
import com.language.exceptions.*;

terminal String NULL;

terminal String POINT;
terminal String SEMICOLON;
terminal String COMMA;
terminal String LEFT_ROUND_BRACKETS;
terminal String RIGHT_ROUND_BRACKETS;
terminal String DOUBLE_QUOTE;
terminal String SINGLE_QUOTE;
terminal String LEFT_SQUARE_BRACKETS;
terminal String RIGHT_SQUARE_BRACKETS;
terminal String VAR;

terminal String LINE_BREAK;
terminal String TABULATION;
terminal String ESCAPE;

terminal String ADDITION;
terminal String SUBTRACTION;
terminal String MULTIPLICATION;
terminal String DIVISION;
terminal String EQUAL;

terminal String INCREMENT;
terminal String DECREMENT;

terminal String TRUE;
terminal String FALSE;

terminal String AND;
terminal String OR;
terminal String NOT;

terminal String GREATER;
terminal String LESS;
terminal String GREATER_EQUAL;
terminal String LESS_EQUAL;
terminal String EQUAL_EQUAL;
terminal String NOT_EQUAL;

terminal String BLOCK_BEGIN;
terminal String IF;
terminal String ELSE;
terminal String FOR;
terminal String BREAK;
terminal String CONTINUE;

terminal String LENGTH_FUNCT;
terminal String CONCAT_FUNCT;
terminal String TO_UPPER_CASE_FUNCT;
terminal String TO_LOWER_CASE_FUNCT;
terminal String CHAR_AT_FUNCT;
terminal String INDEX_OF_FUNCT;
terminal String LAST_INDEX_OF_FUNCT;
terminal String SUBSTRING_FUNCT;
terminal String SPLIT_FUNCT;

terminal String JOIN_FUNCT;
terminal String POP_FUNCT;
terminal String PUSH_FUNCT;
terminal String SHIFT_FUNCT;
terminal String REVERSE_FUNCT;

terminal String NAN;
terminal String IS_NAN;
terminal String PARSE_FUNCT;

terminal String STRING;

terminal String ID;
terminal String INTEGRAL;
terminal String DECIMAL;

non terminal Expression expression;
non terminal Expression primary_expression;
non terminal Expression simple_expression;
non terminal Expression function_expression;
non terminal Expression object_literal; 
non terminal Expression assignment_expression; 
non terminal Expression conditional_expression; 
non terminal Expression parenthesized_expression; 
non terminal Expression left_side_expression;
non terminal Expression compound_assignment;

non terminal Declaration variable_definition;
non terminal Declaration variable_declaration_list;
non terminal Declaration variable_declaration;
non terminal Declaration variable_initializer;

non terminal ArrayLiteral array_literal;
non terminal ElementList element_list;
non terminal LiteralElement literal_element;


/* Parsing de Definiciones de Variables */

variable_definition ::= 
    VAR variable_declaration_list {:  :};

variable_declaration_list ::=
    variable_declaration {:  :}; |
    variable_declaration_list COMMA variable_declaration {:  :};;

variable_declaration ::= 
    ID:a variable_initializer {:  :};

variable_initializer ::=
    /* Esto maneja epsilon */  {:  :}; |
    EQUAL assignment_expression  {:  :};;


/* Parsing de Arrays */

array_literal ::=
    LEFT_SQUARE_BRACKETS RIGHT_SQUARE_BRACKETS |
    LEFT_SQUARE_BRACKETS element_list RIGHT_SQUARE_BRACKETS
    ;

element_list ::=
    literal_element |
    element_list COMMA literal_element
    ;

literal_element	::= NULL;