
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 02 20:50:37 UYT 2014
//----------------------------------------------------

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 02 20:50:37 UYT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\052\003\000\002\054\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\027\005" +
    "\000\002\023\003\000\002\024\004\000\002\024\005\000" +
    "\002\043\003\000\002\043\005\000\002\044\005\000\002" +
    "\072\004\000\002\072\005\000\002\073\003\000\002\073" +
    "\005\000\002\074\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\004\000" +
    "\002\031\004\000\002\034\005\000\002\033\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\004\000\002\040" +
    "\003\000\002\040\003\000\002\035\005\000\002\035\004" +
    "\000\002\036\004\000\002\036\005\000\002\042\003\000" +
    "\002\042\005\000\002\017\003\000\002\017\004\000\002" +
    "\017\004\000\002\016\003\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\011\003" +
    "\000\002\011\005\000\002\010\003\000\002\010\005\000" +
    "\002\026\003\000\002\026\007\000\002\025\003\000\002" +
    "\025\005\000\002\025\005\000\002\020\003\000\002\020" +
    "\005\000\002\032\003\000\002\032\002\000\002\050\003" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\004\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\003\000" +
    "\002\051\003\000\002\053\003\000\002\004\004\000\002" +
    "\005\003\000\002\005\005\000\002\006\004\000\002\007" +
    "\002\000\002\007\004\000\002\055\005\000\002\075\003" +
    "\000\002\076\003\000\002\076\004\000\002\057\005\000" +
    "\002\062\005\000\002\063\013\000\002\047\002\000\002" +
    "\047\003\000\002\047\004\000\002\045\003\000\002\045" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\052\004\054\006\024\010\037\014\050\016" +
    "\100\017\051\032\010\033\020\034\047\035\074\047\012" +
    "\051\033\052\066\054\017\061\036\072\057\102\072\103" +
    "\035\104\004\105\041\001\002\000\064\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\014\ufff5\015\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\036\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\050\ufff5\001\002\000\056\002\uffa7" +
    "\004\uffa7\006\uffa7\010\uffa7\014\uffa7\016\uffa7\017\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\054\uffa7\061\uffa7\072\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\001\002\000\056\006\uffd0\007\uffd0\011\uffd0" +
    "\015\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\273\030" +
    "\uffd0\031\uffd0\032\143\033\142\036\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\001" +
    "\002\000\004\006\147\001\002\000\036\004\054\010\037" +
    "\014\050\017\051\032\010\033\020\034\047\035\074\047" +
    "\112\061\036\102\072\103\035\104\004\105\041\001\002" +
    "\000\004\002\267\001\002\000\054\004\054\006\024\010" +
    "\037\014\050\016\100\017\051\032\010\033\020\034\047" +
    "\035\074\047\012\050\114\051\033\052\066\054\017\061" +
    "\036\072\057\102\072\103\262\104\004\105\041\001\002" +
    "\000\044\006\uffc3\007\uffc3\011\uffc3\015\uffc3\023\132\024" +
    "\133\030\uffc3\031\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\001\002\000" +
    "\064\005\176\006\uffe3\007\uffe3\010\201\011\uffe3\014\177" +
    "\015\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\037\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\050\uffe3\001" +
    "\002\000\064\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\014\uffe0\015\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0\037\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\050" +
    "\uffe0\001\002\000\056\002\uffaa\004\uffaa\006\uffaa\010\uffaa" +
    "\014\uffaa\016\uffaa\017\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\061\uffaa" +
    "\072\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\001\002\000" +
    "\004\010\243\001\002\000\036\004\054\010\037\014\050" +
    "\017\051\032\010\033\020\034\047\035\074\047\112\061" +
    "\036\102\072\103\035\104\004\105\041\001\002\000\004" +
    "\006\147\001\002\000\056\002\uffa4\004\uffa4\006\uffa4\010" +
    "\uffa4\014\uffa4\016\uffa4\017\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\061" +
    "\uffa4\072\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\001\002" +
    "\000\064\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\014" +
    "\uffe1\015\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1" +
    "\001\002\000\056\002\uff9d\004\uff9d\006\uff9d\010\uff9d\014" +
    "\uff9d\016\uff9d\017\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\061\uff9d\072" +
    "\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\001\002\000\056" +
    "\002\uffae\004\uffae\006\uffae\010\uffae\014\uffae\016\uffae\017" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\054\uffae\061\uffae\072\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\001\002\000\022\006\uffb7\007\uffb7" +
    "\011\uffb7\015\uffb7\030\233\031\uffb7\037\234\050\uffb7\001" +
    "\002\000\030\006\uffbb\007\uffbb\011\uffbb\015\uffbb\030\uffbb" +
    "\031\uffbb\036\uffbb\037\uffbb\045\160\046\157\050\uffbb\001" +
    "\002\000\056\002\uffa8\004\uffa8\006\uffa8\010\uffa8\014\uffa8" +
    "\016\uffa8\017\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\054\uffa8\061\uffa8\072\uffa8" +
    "\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000\064\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\014\uffee\015\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\036\uffee\037\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\050\uffee\001\002\000" +
    "\056\006\uffe2\007\uffe2\011\uffe2\015\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\050\uffe2\001\002\000\004\010\037\001" +
    "\002\000\064\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\014\ufff9\015\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\036\ufff9\037\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\050" +
    "\ufff9\001\002\000\064\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\014\ufff2\015\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\036\ufff2" +
    "\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\050\ufff2\001\002\000\036\004\054\010\037\014\050" +
    "\017\051\032\010\033\020\034\047\035\074\047\112\061" +
    "\036\102\072\103\035\104\004\105\041\001\002\000\036" +
    "\004\054\010\037\014\050\017\051\032\010\033\020\034" +
    "\047\035\074\047\112\061\036\102\072\103\035\104\004" +
    "\105\041\001\002\000\006\006\uff9c\007\212\001\002\000" +
    "\064\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014\ufff4" +
    "\015\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\036\ufff4\037\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\001" +
    "\002\000\054\002\uffff\004\054\006\024\010\037\014\050" +
    "\016\100\017\051\032\010\033\020\034\047\035\074\047" +
    "\012\051\033\052\066\054\017\061\036\072\057\102\072" +
    "\103\035\104\004\105\041\001\002\000\064\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0\015\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\050\ufff0\001\002\000\056\002" +
    "\uffa3\004\uffa3\006\uffa3\010\uffa3\014\uffa3\016\uffa3\017\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\054\uffa3\061\uffa3\072\uffa3\102\uffa3\103\uffa3" +
    "\104\uffa3\105\uffa3\001\002\000\050\006\uffc9\007\uffc9\011" +
    "\uffc9\015\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\050\uffc9\001\002\000\064\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\015\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\036\ufffa\037\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\001\002\000\064" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\036\ufff7\037\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7\001\002" +
    "\000\040\004\054\010\037\014\050\015\217\017\051\032" +
    "\010\033\020\034\047\035\074\047\112\061\036\102\072" +
    "\103\035\104\004\105\041\001\002\000\030\004\054\010" +
    "\037\014\050\017\051\034\047\035\074\047\112\102\072" +
    "\103\035\104\004\105\041\001\002\000\004\006\147\001" +
    "\002\000\004\006\147\001\002\000\064\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\014\ufff8\015\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\050\ufff8\001\002\000\016\006\uffb5" +
    "\007\uffb5\011\uffb5\015\uffb5\031\uffb5\050\uffb5\001\002\000" +
    "\004\006\147\001\002\000\004\010\163\001\002\000\050" +
    "\006\uffcd\007\uffcd\011\uffcd\015\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\030\uffcd\031\uffcd\036\uffcd\037\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\001" +
    "\002\000\024\006\uffb9\007\uffb9\011\uffb9\015\uffb9\030\uffb9" +
    "\031\uffb9\036\155\037\uffb9\050\uffb9\001\002\000\004\006" +
    "\147\001\002\000\004\006\ufffd\001\002\000\012\006\uffb2" +
    "\007\uffb2\011\uffb2\015\uffb2\001\002\000\056\002\uffa5\004" +
    "\uffa5\006\uffa5\010\uffa5\014\uffa5\016\uffa5\017\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\054\uffa5\061\uffa5\072\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\001\002\000\004\010\037\001\002\000\056\002" +
    "\uff9e\004\uff9e\006\uff9e\010\uff9e\014\uff9e\016\uff9e\017\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\054\uff9e\061\uff9e\072\uff9e\102\uff9e\103\uff9e" +
    "\104\uff9e\105\uff9e\001\002\000\050\006\uffc6\007\uffc6\011" +
    "\uffc6\015\uffc6\023\uffc6\024\uffc6\025\136\026\135\030\uffc6" +
    "\031\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\050\uffc6\001\002\000\004\006\147" +
    "\001\002\000\064\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\014\ufff3\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\036\ufff3\037" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\050\ufff3\001\002\000\004\006\147\001\002\000\064\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\015\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\036\ufff6\037\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6\001\002\000" +
    "\040\006\uffbe\007\uffbe\011\uffbe\015\uffbe\030\uffbe\031\uffbe" +
    "\036\uffbe\037\uffbe\041\124\042\126\043\125\044\127\045" +
    "\uffbe\046\uffbe\050\uffbe\001\002\000\056\002\uffa9\004\uffa9" +
    "\006\uffa9\010\uffa9\014\uffa9\016\uffa9\017\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\054\uffa9\061\uffa9\072\uffa9\102\uffa9\103\uffa9\104\uffa9\105" +
    "\uffa9\001\002\000\064\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\014\ufff1\015\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\036\ufff1" +
    "\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\050\ufff1\001\002\000\004\103\102\001\002\000\064" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\015" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\036\ufffb\037\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\050\ufffb\001\002" +
    "\000\010\006\uff97\007\uff97\027\107\001\002\000\006\006" +
    "\uff9b\007\105\001\002\000\006\006\uff9a\007\uff9a\001\002" +
    "\000\004\103\102\001\002\000\006\006\uff99\007\uff99\001" +
    "\002\000\036\004\054\010\037\014\050\017\051\032\010" +
    "\033\020\034\047\035\074\047\112\061\036\102\072\103" +
    "\035\104\004\105\041\001\002\000\006\006\uff98\007\uff98" +
    "\001\002\000\006\006\uff96\007\uff96\001\002\000\006\050" +
    "\114\103\113\001\002\000\004\031\122\001\002\000\064" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\015" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\036\uffed\037\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\050\uffed\001\002" +
    "\000\006\007\uffeb\050\uffeb\001\002\000\006\007\117\050" +
    "\120\001\002\000\004\103\113\001\002\000\064\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\014\uffec\015\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\036\uffec\037\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\050\uffec\001\002\000\006" +
    "\007\uffea\050\uffea\001\002\000\036\004\054\010\037\014" +
    "\050\017\051\032\010\033\020\034\047\035\074\047\112" +
    "\061\036\102\072\103\035\104\004\105\041\001\002\000" +
    "\006\007\uffe9\050\uffe9\001\002\000\036\004\054\010\037" +
    "\014\050\017\051\032\010\033\020\034\047\035\074\047" +
    "\112\061\036\102\072\103\035\104\004\105\041\001\002" +
    "\000\036\004\054\010\037\014\050\017\051\032\010\033" +
    "\020\034\047\035\074\047\112\061\036\102\072\103\035" +
    "\104\004\105\041\001\002\000\036\004\054\010\037\014" +
    "\050\017\051\032\010\033\020\034\047\035\074\047\112" +
    "\061\036\102\072\103\035\104\004\105\041\001\002\000" +
    "\036\004\054\010\037\014\050\017\051\032\010\033\020" +
    "\034\047\035\074\047\112\061\036\102\072\103\035\104" +
    "\004\105\041\001\002\000\054\006\uffd0\007\uffd0\011\uffd0" +
    "\015\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031" +
    "\uffd0\032\143\033\142\036\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\001\002\000" +
    "\044\006\uffbf\007\uffbf\011\uffbf\015\uffbf\023\132\024\133" +
    "\030\uffbf\031\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf\001\002\000\036" +
    "\004\054\010\037\014\050\017\051\032\010\033\020\034" +
    "\047\035\074\047\112\061\036\102\072\103\035\104\004" +
    "\105\041\001\002\000\036\004\054\010\037\014\050\017" +
    "\051\032\010\033\020\034\047\035\074\047\112\061\036" +
    "\102\072\103\035\104\004\105\041\001\002\000\050\006" +
    "\uffc4\007\uffc4\011\uffc4\015\uffc4\023\uffc4\024\uffc4\025\136" +
    "\026\135\030\uffc4\031\uffc4\036\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\001\002" +
    "\000\036\004\054\010\037\014\050\017\051\032\010\033" +
    "\020\034\047\035\074\047\112\061\036\102\072\103\035" +
    "\104\004\105\041\001\002\000\036\004\054\010\037\014" +
    "\050\017\051\032\010\033\020\034\047\035\074\047\112" +
    "\061\036\102\072\103\035\104\004\105\041\001\002\000" +
    "\050\006\uffc8\007\uffc8\011\uffc8\015\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\030\uffc8\031\uffc8\036\uffc8\037\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8" +
    "\001\002\000\050\006\uffc7\007\uffc7\011\uffc7\015\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\036\uffc7" +
    "\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\050\uffc7\001\002\000\050\006\uffc5\007\uffc5\011\uffc5" +
    "\015\uffc5\023\uffc5\024\uffc5\025\136\026\135\030\uffc5\031" +
    "\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\050\uffc5\001\002\000\050\006\uffce\007" +
    "\uffce\011\uffce\015\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\030\uffce\031\uffce\036\uffce\037\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\050\uffce\001\002\000\050" +
    "\006\uffcf\007\uffcf\011\uffcf\015\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\030\uffcf\031\uffcf\036\uffcf\037\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\001" +
    "\002\000\044\006\uffc1\007\uffc1\011\uffc1\015\uffc1\023\132" +
    "\024\133\030\uffc1\031\uffc1\036\uffc1\037\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1\001\002" +
    "\000\044\006\uffc0\007\uffc0\011\uffc0\015\uffc0\023\132\024" +
    "\133\030\uffc0\031\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0\001\002\000" +
    "\044\006\uffc2\007\uffc2\011\uffc2\015\uffc2\023\132\024\133" +
    "\030\uffc2\031\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\001\002\000\056" +
    "\002\ufffc\004\ufffc\006\ufffc\010\ufffc\014\ufffc\016\ufffc\017" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\054\ufffc\061\ufffc\072\ufffc\102\ufffc\103" +
    "\ufffc\104\ufffc\105\ufffc\001\002\000\056\002\uffab\004\uffab" +
    "\006\uffab\010\uffab\014\uffab\016\uffab\017\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\054\uffab\061\uffab\072\uffab\102\uffab\103\uffab\104\uffab\105" +
    "\uffab\001\002\000\056\002\uffac\004\uffac\006\uffac\010\uffac" +
    "\014\uffac\016\uffac\017\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\054\uffac\061\uffac" +
    "\072\uffac\102\uffac\103\uffac\104\uffac\105\uffac\001\002\000" +
    "\052\004\054\006\024\010\037\014\050\016\100\017\051" +
    "\032\010\033\020\034\047\035\074\047\012\051\033\052" +
    "\066\054\017\061\036\072\057\102\072\103\035\104\004" +
    "\105\041\001\002\000\056\002\uff90\004\uff90\006\uff90\010" +
    "\uff90\014\uff90\016\uff90\017\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\047\uff90\050\uff90\051\uff90\052\uff90\054\uff90\061" +
    "\uff90\072\uff90\102\uff90\103\uff90\104\uff90\105\uff90\001\002" +
    "\000\056\002\uff9f\004\uff9f\006\uff9f\010\uff9f\014\uff9f\016" +
    "\uff9f\017\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\054\uff9f\061\uff9f\072\uff9f\102" +
    "\uff9f\103\uff9f\104\uff9f\105\uff9f\001\002\000\036\004\054" +
    "\010\037\014\050\017\051\032\010\033\020\034\047\035" +
    "\074\047\112\061\036\102\072\103\035\104\004\105\041" +
    "\001\002\000\030\006\uffba\007\uffba\011\uffba\015\uffba\030" +
    "\uffba\031\uffba\036\uffba\037\uffba\045\160\046\157\050\uffba" +
    "\001\002\000\036\004\054\010\037\014\050\017\051\032" +
    "\010\033\020\034\047\035\074\047\112\061\036\102\072" +
    "\103\035\104\004\105\041\001\002\000\036\004\054\010" +
    "\037\014\050\017\051\032\010\033\020\034\047\035\074" +
    "\047\112\061\036\102\072\103\035\104\004\105\041\001" +
    "\002\000\040\006\uffbd\007\uffbd\011\uffbd\015\uffbd\030\uffbd" +
    "\031\uffbd\036\uffbd\037\uffbd\041\124\042\126\043\125\044" +
    "\127\045\uffbd\046\uffbd\050\uffbd\001\002\000\040\006\uffbc" +
    "\007\uffbc\011\uffbc\015\uffbc\030\uffbc\031\uffbc\036\uffbc\037" +
    "\uffbc\041\124\042\126\043\125\044\127\045\uffbc\046\uffbc" +
    "\050\uffbc\001\002\000\004\103\164\001\002\000\004\011" +
    "\165\001\002\000\004\006\ufffe\001\002\000\056\002\uffa0" +
    "\004\uffa0\006\uffa0\010\uffa0\014\uffa0\016\uffa0\017\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\054\uffa0\061\uffa0\072\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\105\uffa0\001\002\000\056\002\uffa6\004\uffa6\006\uffa6" +
    "\010\uffa6\014\uffa6\016\uffa6\017\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6" +
    "\061\uffa6\072\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\001" +
    "\002\000\056\002\uffa2\004\uffa2\006\uffa2\010\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2\061\uffa2\072\uffa2" +
    "\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002\000\064\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\001\002\000" +
    "\064\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\014\uffda" +
    "\015\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\036\uffda\037\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda\001" +
    "\002\000\056\006\uffdc\007\uffdc\011\uffdc\015\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\050\uffdc\001\002\000\056\006" +
    "\uffd7\007\uffd7\011\uffd7\015\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\001\002\000\064\005\176\006\uffd8\007" +
    "\uffd8\010\201\011\uffd8\014\177\015\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\050\uffd8\001\002\000\004\103\215\001" +
    "\002\000\036\004\054\010\037\014\050\017\051\032\010" +
    "\033\020\034\047\035\074\047\112\061\036\102\072\103" +
    "\035\104\004\105\041\001\002\000\064\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\050\uffdd\001\002\000\040\004\054" +
    "\010\037\011\205\014\050\017\051\032\010\033\020\034" +
    "\047\035\074\047\112\061\036\102\072\103\035\104\004" +
    "\105\041\001\002\000\064\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\014\uffd9\015\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\050\uffd9\001\002\000\006\007\206\011\207\001" +
    "\002\000\006\007\uffd2\011\uffd2\001\002\000\064\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4\015\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\001\002\000\036" +
    "\004\054\010\037\014\050\017\051\032\010\033\020\034" +
    "\047\035\074\047\112\061\036\102\072\103\035\104\004" +
    "\105\041\001\002\000\064\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\014\uffd3\015\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\036" +
    "\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\050\uffd3\001\002\000\006\007\uffd1\011\uffd1\001" +
    "\002\000\006\007\212\015\213\001\002\000\036\004\054" +
    "\010\037\014\050\017\051\032\010\033\020\034\047\035" +
    "\074\047\112\061\036\102\072\103\035\104\004\105\041" +
    "\001\002\000\064\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\014\uffd6\015\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\037" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\050\uffd6\001\002\000\012\006\uffb1\007\uffb1\011\uffb1\015" +
    "\uffb1\001\002\000\064\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\050\uffd5\001\002\000\006\007\uffe6\015\uffe6\001\002" +
    "\000\064\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\014" +
    "\uffe8\015\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\001\002\000\006\007\222\015\223\001\002\000\006\007" +
    "\uffe4\015\uffe4\001\002\000\036\004\054\010\037\014\050" +
    "\017\051\032\010\033\020\034\047\035\074\047\112\061" +
    "\036\102\072\103\035\104\004\105\041\001\002\000\064" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\014\uffe7\015" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\036\uffe7\037\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7\001\002" +
    "\000\006\007\uffe5\015\uffe5\001\002\000\004\002\001\001" +
    "\002\000\006\007\212\011\227\001\002\000\122\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054" +
    "\uffef\061\uffef\072\uffef\102\uffef\103\uffef\104\uffef\105\uffef" +
    "\001\002\000\050\006\uffcc\007\uffcc\011\uffcc\015\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\036\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\001\002\000\052\004\054\006\024\010\037" +
    "\014\050\016\100\017\051\032\010\033\020\034\047\035" +
    "\074\047\012\051\033\052\066\054\017\061\036\072\057" +
    "\102\072\103\035\104\004\105\041\001\002\000\056\002" +
    "\uff91\004\uff91\006\uff91\010\uff91\014\uff91\016\uff91\017\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\054\uff91\061\uff91\072\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\001\002\000\036\004\054\010\037\014" +
    "\050\017\051\032\010\033\020\034\047\035\074\047\112" +
    "\061\036\102\072\103\035\104\004\105\041\001\002\000" +
    "\036\004\054\010\037\014\050\017\051\032\010\033\020" +
    "\034\047\035\074\047\112\061\036\102\072\103\035\104" +
    "\004\105\041\001\002\000\024\006\uffb8\007\uffb8\011\uffb8" +
    "\015\uffb8\030\uffb8\031\uffb8\036\155\037\uffb8\050\uffb8\001" +
    "\002\000\004\031\237\001\002\000\036\004\054\010\037" +
    "\014\050\017\051\032\010\033\020\034\047\035\074\047" +
    "\112\061\036\102\072\103\035\104\004\105\041\001\002" +
    "\000\016\006\uffb6\007\uffb6\011\uffb6\015\uffb6\031\uffb6\050" +
    "\uffb6\001\002\000\056\002\uffad\004\uffad\006\uffad\010\uffad" +
    "\014\uffad\016\uffad\017\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad\061\uffad" +
    "\072\uffad\102\uffad\103\uffad\104\uffad\105\uffad\001\002\000" +
    "\050\006\uffca\007\uffca\011\uffca\015\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\030\uffca\031\uffca\036\uffca\037\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\050\uffca" +
    "\001\002\000\042\004\054\006\uff8e\010\037\014\050\016" +
    "\246\017\051\032\010\033\020\034\047\035\074\047\112" +
    "\061\036\102\072\103\035\104\004\105\041\001\002\000" +
    "\006\006\uff8d\007\212\001\002\000\004\006\250\001\002" +
    "\000\004\103\102\001\002\000\006\006\uff8c\007\105\001" +
    "\002\000\040\004\054\006\uffaf\010\037\014\050\017\051" +
    "\032\010\033\020\034\047\035\074\047\112\061\036\102" +
    "\072\103\035\104\004\105\041\001\002\000\010\006\uffb0" +
    "\007\212\011\uffb0\001\002\000\004\006\253\001\002\000" +
    "\040\004\054\010\037\011\uffaf\014\050\017\051\032\010" +
    "\033\020\034\047\035\074\047\112\061\036\102\072\103" +
    "\035\104\004\105\041\001\002\000\004\011\255\001\002" +
    "\000\052\004\054\006\024\010\037\014\050\016\100\017" +
    "\051\032\010\033\020\034\047\035\074\047\012\051\033" +
    "\052\066\054\017\061\036\072\057\102\072\103\035\104" +
    "\004\105\041\001\002\000\056\002\uff8f\004\uff8f\006\uff8f" +
    "\010\uff8f\014\uff8f\016\uff8f\017\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\054\uff8f" +
    "\061\uff8f\072\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\001" +
    "\002\000\064\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\014\uffde\015\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\050" +
    "\uffde\001\002\000\064\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\014\uffdf\015\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\001\002\000\054\004\054\006\024\010\037" +
    "\014\050\016\100\017\051\032\010\033\020\034\047\035" +
    "\074\047\012\050\uff94\051\033\052\066\054\017\061\036" +
    "\072\057\102\072\103\035\104\004\105\041\001\002\000" +
    "\056\005\ufff2\006\ufff2\007\ufff2\010\ufff2\014\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\122\032" +
    "\ufff2\033\ufff2\036\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\001\002\000\054\004\uff93\006" +
    "\uff93\010\uff93\014\uff93\016\uff93\017\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054" +
    "\uff93\061\uff93\072\uff93\102\uff93\103\uff93\104\uff93\105\uff93" +
    "\001\002\000\004\050\265\001\002\000\056\002\uff95\004" +
    "\uff95\006\uff95\010\uff95\014\uff95\016\uff95\017\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\054\uff95\061\uff95\072\uff95\102\uff95\103\uff95\104\uff95" +
    "\105\uff95\001\002\000\054\004\uff92\006\uff92\010\uff92\014" +
    "\uff92\016\uff92\017\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\054\uff92\061\uff92\072" +
    "\uff92\102\uff92\103\uff92\104\uff92\105\uff92\001\002\000\004" +
    "\002\000\001\002\000\050\006\uffcb\007\uffcb\011\uffcb\015" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb" +
    "\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\050\uffcb\001\002\000\056\002\uffa1\004\uffa1" +
    "\006\uffa1\010\uffa1\014\uffa1\016\uffa1\017\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\054\uffa1\061\uffa1\072\uffa1\102\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\001\002\000\036\004\054\010\037\014\050\017\051" +
    "\032\010\033\020\034\047\035\074\047\112\061\036\102" +
    "\072\103\035\104\004\105\041\001\002\000\036\004\054" +
    "\010\037\014\050\017\051\032\010\033\020\034\047\035" +
    "\074\047\112\061\036\102\072\103\035\104\004\105\041" +
    "\001\002\000\016\006\uffb4\007\uffb4\011\uffb4\015\uffb4\031" +
    "\uffb4\050\uffb4\001\002\000\016\006\uffb3\007\uffb3\011\uffb3" +
    "\015\uffb3\031\uffb3\050\uffb3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\126\002\010\003\062\004\072\010\025\011" +
    "\060\012\026\013\074\014\012\015\067\016\044\017\057" +
    "\020\037\021\022\022\100\023\045\024\033\025\063\026" +
    "\054\027\076\030\005\031\013\033\031\034\014\046\030" +
    "\050\041\051\024\052\020\053\070\055\015\056\075\057" +
    "\027\060\004\061\052\062\064\063\021\064\043\065\051" +
    "\066\006\067\055\070\061\071\066\072\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\271\001\001" +
    "\000\004\054\270\001\001\000\034\016\267\017\057\021" +
    "\022\022\100\023\045\024\033\027\076\030\127\031\013" +
    "\033\031\034\014\046\030\072\042\001\001\000\002\001" +
    "\001\000\134\003\062\004\072\010\025\011\060\012\026" +
    "\013\074\014\012\015\067\016\044\017\057\020\037\021" +
    "\022\022\100\023\045\024\033\025\063\026\054\027\076" +
    "\030\005\031\013\033\031\034\014\043\115\044\114\046" +
    "\030\050\262\051\024\052\020\053\070\055\015\056\075" +
    "\057\027\060\004\061\052\062\064\063\021\064\043\065" +
    "\051\066\006\067\055\070\061\071\066\072\042\075\263" +
    "\076\260\001\001\000\002\001\001\000\006\035\257\036" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\016\241\017\057\021\022\022\100\023" +
    "\045\024\033\027\076\030\127\031\013\033\031\034\014" +
    "\046\030\072\042\001\001\000\004\054\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\016" +
    "\227\017\057\021\022\022\100\023\045\024\033\027\076" +
    "\030\127\031\013\033\031\034\014\046\030\072\042\001" +
    "\001\000\056\010\025\011\060\012\026\013\074\014\012" +
    "\015\067\016\044\017\057\020\225\021\022\022\100\023" +
    "\045\024\033\025\063\026\054\027\076\030\005\031\013" +
    "\033\031\034\014\046\030\072\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\126\002\224\003\062\004\072" +
    "\010\025\011\060\012\026\013\074\014\012\015\067\016" +
    "\044\017\057\020\037\021\022\022\100\023\045\024\033" +
    "\025\063\026\054\027\076\030\005\031\013\033\031\034" +
    "\014\046\030\050\041\051\024\052\020\053\070\055\015" +
    "\056\075\057\027\060\004\061\052\062\064\063\021\064" +
    "\043\065\051\066\006\067\055\070\061\071\066\072\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\010\025" +
    "\011\060\012\026\013\074\014\012\015\067\016\044\017" +
    "\057\021\022\022\100\023\045\024\033\025\220\026\054" +
    "\027\076\030\005\031\013\033\031\034\014\046\030\072" +
    "\042\073\217\074\215\001\001\000\030\021\170\022\100" +
    "\023\045\024\033\027\076\033\173\034\171\037\174\040" +
    "\172\046\030\072\042\001\001\000\004\054\167\001\001" +
    "\000\004\054\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\150\001\001\000\002\001\001\000\004\054\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\102\006\103\001\001" +
    "\000\002\001\001\000\004\007\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\105\001\001\000\002" +
    "\001\001\000\054\010\025\011\060\012\026\013\074\014" +
    "\012\015\067\016\044\017\057\021\022\022\100\023\045" +
    "\024\033\025\110\026\054\027\076\030\005\031\013\033" +
    "\031\034\014\046\030\072\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\115\044\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\010\025\011\060\012\026\013\074" +
    "\014\012\015\067\016\044\017\057\021\022\022\100\023" +
    "\045\024\033\025\122\026\054\027\076\030\005\031\013" +
    "\033\031\034\014\046\030\072\042\001\001\000\002\001" +
    "\001\000\040\014\145\015\067\016\044\017\057\021\022" +
    "\022\100\023\045\024\033\027\076\030\127\031\013\033" +
    "\031\034\014\046\030\072\042\001\001\000\040\014\144" +
    "\015\067\016\044\017\057\021\022\022\100\023\045\024" +
    "\033\027\076\030\127\031\013\033\031\034\014\046\030" +
    "\072\042\001\001\000\040\014\143\015\067\016\044\017" +
    "\057\021\022\022\100\023\045\024\033\027\076\030\127" +
    "\031\013\033\031\034\014\046\030\072\042\001\001\000" +
    "\040\014\130\015\067\016\044\017\057\021\022\022\100" +
    "\023\045\024\033\027\076\030\127\031\013\033\031\034" +
    "\014\046\030\072\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\015\140\016\044\017\057\021\022\022" +
    "\100\023\045\024\033\027\076\030\127\031\013\033\031" +
    "\034\014\046\030\072\042\001\001\000\036\015\133\016" +
    "\044\017\057\021\022\022\100\023\045\024\033\027\076" +
    "\030\127\031\013\033\031\034\014\046\030\072\042\001" +
    "\001\000\002\001\001\000\034\016\137\017\057\021\022" +
    "\022\100\023\045\024\033\027\076\030\127\031\013\033" +
    "\031\034\014\046\030\072\042\001\001\000\034\016\136" +
    "\017\057\021\022\022\100\023\045\024\033\027\076\030" +
    "\127\031\013\033\031\034\014\046\030\072\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\124\003\062\004\072\010\025" +
    "\011\060\012\026\013\074\014\012\015\067\016\044\017" +
    "\057\020\037\021\022\022\100\023\045\024\033\025\063" +
    "\026\054\027\076\030\005\031\013\033\031\034\014\046" +
    "\030\050\152\051\024\052\020\053\070\055\015\056\075" +
    "\057\027\060\004\061\052\062\064\063\021\064\043\065" +
    "\051\066\006\067\055\070\061\071\066\072\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\155\013" +
    "\074\014\012\015\067\016\044\017\057\021\022\022\100" +
    "\023\045\024\033\027\076\030\127\031\013\033\031\034" +
    "\014\046\030\072\042\001\001\000\002\001\001\000\042" +
    "\013\161\014\012\015\067\016\044\017\057\021\022\022" +
    "\100\023\045\024\033\027\076\030\127\031\013\033\031" +
    "\034\014\046\030\072\042\001\001\000\042\013\160\014" +
    "\012\015\067\016\044\017\057\021\022\022\100\023\045" +
    "\024\033\027\076\030\127\031\013\033\031\034\014\046" +
    "\030\072\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\201\036\177\001\001\000\002\001\001" +
    "\000\056\010\025\011\060\012\026\013\074\014\012\015" +
    "\067\016\044\017\057\020\210\021\022\022\100\023\045" +
    "\024\033\025\063\026\054\027\076\030\005\031\013\033" +
    "\031\034\014\046\030\072\042\001\001\000\002\001\001" +
    "\000\056\010\025\011\060\012\026\013\074\014\012\015" +
    "\067\016\044\017\057\021\022\022\100\023\045\024\033" +
    "\025\203\026\054\027\076\030\005\031\013\033\031\034" +
    "\014\042\202\046\030\072\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\010\025\011\060\012\026\013\074\014\012\015\067" +
    "\016\044\017\057\021\022\022\100\023\045\024\033\025" +
    "\207\026\054\027\076\030\005\031\013\033\031\034\014" +
    "\046\030\072\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\010\025\011\060\012\026" +
    "\013\074\014\012\015\067\016\044\017\057\021\022\022" +
    "\100\023\045\024\033\025\213\026\054\027\076\030\005" +
    "\031\013\033\031\034\014\046\030\072\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\010\025\011\060\012\026\013\074\014\012" +
    "\015\067\016\044\017\057\021\022\022\100\023\045\024" +
    "\033\025\220\026\054\027\076\030\005\031\013\033\031" +
    "\034\014\046\030\072\042\074\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\124\003\062\004" +
    "\072\010\025\011\060\012\026\013\074\014\012\015\067" +
    "\016\044\017\057\020\037\021\022\022\100\023\045\024" +
    "\033\025\063\026\054\027\076\030\005\031\013\033\031" +
    "\034\014\046\030\050\231\051\024\052\020\053\070\055" +
    "\015\056\075\057\027\060\004\061\052\062\064\063\021" +
    "\064\043\065\051\066\006\067\055\070\061\071\066\072" +
    "\042\001\001\000\002\001\001\000\054\010\025\011\060" +
    "\012\026\013\074\014\012\015\067\016\044\017\057\021" +
    "\022\022\100\023\045\024\033\025\235\026\054\027\076" +
    "\030\005\031\013\033\031\034\014\046\030\072\042\001" +
    "\001\000\046\011\234\012\026\013\074\014\012\015\067" +
    "\016\044\017\057\021\022\022\100\023\045\024\033\027" +
    "\076\030\127\031\013\033\031\034\014\046\030\072\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\010" +
    "\025\011\060\012\026\013\074\014\012\015\067\016\044" +
    "\017\057\021\022\022\100\023\045\024\033\025\237\026" +
    "\054\027\076\030\005\031\013\033\031\034\014\046\030" +
    "\072\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\010\025\011\060\012\026\013\074" +
    "\014\012\015\067\016\044\017\057\020\243\021\022\022" +
    "\100\023\045\024\033\025\063\026\054\027\076\030\005" +
    "\031\013\033\031\034\014\046\030\047\244\072\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\246" +
    "\006\103\001\001\000\002\001\001\000\060\010\025\011" +
    "\060\012\026\013\074\014\012\015\067\016\044\017\057" +
    "\020\250\021\022\022\100\023\045\024\033\025\063\026" +
    "\054\027\076\030\005\031\013\032\251\033\031\034\014" +
    "\046\030\072\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\010\025\011\060\012\026\013\074\014\012" +
    "\015\067\016\044\017\057\020\250\021\022\022\100\023" +
    "\045\024\033\025\063\026\054\027\076\030\005\031\013" +
    "\032\253\033\031\034\014\046\030\072\042\001\001\000" +
    "\002\001\001\000\124\003\062\004\072\010\025\011\060" +
    "\012\026\013\074\014\012\015\067\016\044\017\057\020" +
    "\037\021\022\022\100\023\045\024\033\025\063\026\054" +
    "\027\076\030\005\031\013\033\031\034\014\046\030\050" +
    "\255\051\024\052\020\053\070\055\015\056\075\057\027" +
    "\060\004\061\052\062\064\063\021\064\043\065\051\066" +
    "\006\067\055\070\061\071\066\072\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\062\004\072\010\025\011\060\012\026\013\074\014\012" +
    "\015\067\016\044\017\057\020\037\021\022\022\100\023" +
    "\045\024\033\025\063\026\054\027\076\030\005\031\013" +
    "\033\031\034\014\046\030\050\265\051\024\052\020\053" +
    "\070\055\015\056\075\057\027\060\004\061\052\062\064" +
    "\063\021\064\043\065\051\066\006\067\055\070\061\071" +
    "\066\072\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\010\025\011\060\012\026\013\074\014\012\015\067\016" +
    "\044\017\057\021\022\022\100\023\045\024\033\025\274" +
    "\026\054\027\076\030\005\031\013\033\031\034\014\046" +
    "\030\072\042\001\001\000\054\010\025\011\060\012\026" +
    "\013\074\014\012\015\067\016\044\017\057\021\022\022" +
    "\100\023\045\024\033\025\273\026\054\027\076\030\005" +
    "\031\013\033\031\034\014\046\030\072\042\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // in_binding ::= VAR variable_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_binding",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // in_binding ::= left_side_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_binding",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_initializer ::= VAR variable_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initializer",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_initializer ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initializer",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_initializer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initializer",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_statement ::= FOR LEFT_ROUND_BRACKET for_initializer SEMICOLON optional_expression SEMICOLON optional_expression RIGHT_ROUND_BRACKET statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // while_statement ::= WHILE parenthesized_expression statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_statement ::= IF parenthesized_expression statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_statements_prefix ::= block_statements_prefix statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_statements_prefix",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // block_statements_prefix ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_statements_prefix",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // block_statements ::= block_statements_prefix 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_statements",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // block ::= BLOCK_BEGIN block_statements BLOCK_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variable_initializer ::= EQUAL assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable_initializer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_declaration ::= ID variable_initializer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable_declaration_list ::= variable_declaration_list COMMA variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable_declaration_list ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_definition ::= VAR variable_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_definition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_statement ::= expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement ::= try_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un try_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= throw_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un throw_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement ::= return_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un return_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= break_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un break_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= continue_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un continue_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= with_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un with_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= for_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un for_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= while_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un while_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= do_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un do_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= switch_statemente 
            {
              Object RESULT =null;
		 System.out.println("Detecte un switch_statemente"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un if_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= labeled_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un labeled_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= block 
            {
              Object RESULT =null;
		 System.out.println("Detecte un block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= variable_definition optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un variable_definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= expression_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= known_function optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un known_function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= empty_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un empty_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // optional_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // optional_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression COMMA assignment_expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression COMMA assignment_expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= assignment_expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un assignment_expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_expression ::= left_side_expression compound_assignment assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_expression ::= left_side_expression EQUAL assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_expression ::= conditional_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional_expression ::= logical_or_expression QUEST assignment_expression COLON assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditional_expression ::= logical_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_or_expression ::= logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_and_expression ::= logical_and_expression AND equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_and_expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // equality_expression ::= equality_expression NOT_EQUAL relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // equality_expression ::= equality_expression EQUAL_EQUAL relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_expression ::= relational_expression LESS_EQUAL additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_expression ::= relational_expression GREATER_EQUAL additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expression ::= relational_expression LESS additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relational_expression ::= additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // multiplicative_expression ::= multiplicative_expression TIMES unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multiplicative_expression ::= unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_expression ::= DECREMENT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unary_expression ::= INCREMENT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unary_expression ::= TYPEOF_FUNCT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unary_expression ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // postfix_expression ::= left_side_expression DECREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // postfix_expression ::= left_side_expression INCREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // postfix_expression ::= left_side_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argument_list ::= argument_list COMMA assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argument_list ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arguments ::= LEFT_ROUND_BRACKET argument_list RIGHT_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arguments ::= LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // member_operator ::= POINT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("member_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // member_operator ::= LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("member_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // short_new_subexpression ::= short_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_new_subexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // short_new_subexpression ::= full_new_subexpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_new_subexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // full_new_subexpression ::= full_new_subexpression member_operator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_new_subexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // full_new_subexpression ::= full_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_new_subexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // full_new_subexpression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_new_subexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // short_new_expression ::= NEW short_new_subexpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_new_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // full_new_expression ::= NEW full_new_subexpression arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_new_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // call_expression ::= call_expression arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // call_expression ::= call_expression member_operator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // call_expression ::= full_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // call_expression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // left_side_expression ::= short_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // left_side_expression ::= call_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal_element ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_element",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // element_list ::= element_list COMMA literal_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // element_list ::= literal_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_literal ::= LEFT_SQUARE_BRACKET element_list RIGHT_SQUARE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_literal ::= LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal_field ::= ID COLON assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_field",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // field_list ::= field_list COMMA literal_field 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_list ::= literal_field 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // object_literal ::= BLOCK_BEGIN field_list BLOCK_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_literal",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // object_literal ::= BLOCK_BEGIN BLOCK_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_literal",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_expression ::= named_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parenthesized_expression ::= LEFT_ROUND_BRACKET expression RIGHT_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenthesized_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_expression ::= array_literal 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_expression ::= parenthesized_expression 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Detecte un parenthesized.."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_expression ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_expression ::= STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_expression ::= DECIMAL 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_expression ::= INTEGRAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_expression ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_expression ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_expression ::= NULL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primary_expression ::= object_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primary_expression ::= function_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primary_expression ::= simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_semicolon ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_semicolon",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // known_function ::= console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("known_function",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // console_log ::= CONSOLE_LOG LEFT_ROUND_BRACKET ID RIGHT_ROUND_BRACKET 
            {
              Object RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String var_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            Variables variables = Variables.getInstance();
            Var var = variables.getVariableByName(var_name);
            ConsoleLog cl = new ConsoleLog((String)var.getValue());
            cl.execute();
            
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_log",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // main ::= statement main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

