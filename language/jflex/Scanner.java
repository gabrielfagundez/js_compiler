/* The following code was generated by JFlex 1.6.0 */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.exceptions.*;
import com.language.model.expression.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 2;
  public static final int COMMENT_BLOCK = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\2\1\0\1\3\1\1\22\0\1\3\1\42\1\14"+
    "\1\0\1\4\1\0\1\40\1\15\1\12\1\13\1\27\1\25\1\11"+
    "\1\26\1\7\1\30\1\6\11\5\1\0\1\10\1\44\1\31\1\43"+
    "\2\0\1\64\1\4\1\61\5\4\1\70\2\4\1\62\1\4\1\72"+
    "\1\67\5\4\1\57\5\4\1\16\1\24\1\17\1\0\1\4\1\0"+
    "\1\21\1\51\1\53\1\65\1\34\1\35\1\55\1\56\1\47\1\71"+
    "\1\52\1\36\1\4\1\54\1\50\1\60\1\4\1\22\1\37\1\32"+
    "\1\33\1\20\1\63\1\66\2\4\1\45\1\41\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\2\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\5\2\2\0\1\23\1\24"+
    "\1\25\1\26\1\27\6\2\6\30\1\21\15\30\1\20"+
    "\2\0\1\31\1\0\1\31\2\2\1\32\1\33\1\34"+
    "\1\35\1\36\12\2\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\12\2\1\45\1\46\1\47\6\2\1\50\14\2"+
    "\1\51\1\2\1\52\1\2\1\53\2\2\1\54\15\2"+
    "\1\55\1\56\3\2\1\57\3\2\1\60\1\61\1\62"+
    "\1\2\1\63\3\2\1\64\4\2\1\65\3\2\1\66"+
    "\1\67\1\70\4\2\1\71\5\2\1\72\3\2\1\73"+
    "\3\2\1\74\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\354\0\354\0\354\0\354\0\354\0\u01d8\0\u0213\0\354"+
    "\0\354\0\u024e\0\u0289\0\354\0\u02c4\0\u02ff\0\354\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\354\0\354\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\354\0\u0127\0\u0162\0\u019d\0\u024e"+
    "\0\u0289\0\354\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u01d8\0\354\0\u0213\0\u0213\0\u07d6\0\u0811\0\354"+
    "\0\354\0\354\0\354\0\354\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\354\0\354"+
    "\0\354\0\354\0\354\0\u0127\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\354\0\u079b"+
    "\0\u0127\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0127"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u0127\0\u110e\0\u0127\0\u1149"+
    "\0\u0127\0\u1184\0\u11bf\0\u0127\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u0127\0\u0127\0\u14f9\0\u1534\0\u156f\0\u0127\0\u15aa"+
    "\0\u15e5\0\u1620\0\u0127\0\u0127\0\u0127\0\u165b\0\u0127\0\u1696"+
    "\0\u16d1\0\u170c\0\u0127\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u0127"+
    "\0\u1833\0\u186e\0\u18a9\0\u0127\0\u0127\0\u0127\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u0127\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u0127\0\u1af7\0\u1b32\0\u1b6d\0\u0127\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u0127\0\u0127\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\6\1\23\1\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\6\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\6"+
    "\1\47\1\6\1\50\4\6\1\51\10\6\1\52\1\53"+
    "\1\54\1\4\2\5\1\55\1\56\1\57\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\60"+
    "\1\55\1\61\1\5\1\24\1\25\1\26\1\27\1\62"+
    "\1\31\1\63\1\55\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\41\1\42\1\43\2\54\1\72\1\55\1\73"+
    "\1\55\1\74\4\55\1\75\10\55\1\76\1\77\1\54"+
    "\1\4\2\5\1\55\1\56\1\57\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\60\1\55"+
    "\1\61\1\5\1\24\1\25\1\26\1\100\1\62\1\31"+
    "\1\63\1\55\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\41\1\42\1\43\2\54\1\72\1\55\1\73\1\55"+
    "\1\74\4\55\1\75\10\55\1\76\1\77\2\0\1\5"+
    "\167\0\3\6\11\0\3\6\7\0\6\6\7\0\24\6"+
    "\5\0\2\7\1\101\72\0\1\101\63\0\1\102\2\0"+
    "\11\102\1\103\6\102\1\0\47\102\1\104\2\0\11\104"+
    "\1\0\1\105\5\104\1\0\47\104\4\0\3\6\11\0"+
    "\1\6\1\106\1\6\7\0\6\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\2\6\1\107\3\6\7\0"+
    "\24\6\25\0\1\110\73\0\1\111\73\0\1\112\1\113"+
    "\73\0\1\114\45\0\3\6\11\0\2\6\1\115\7\0"+
    "\6\6\7\0\1\6\1\116\22\6\4\0\3\6\11\0"+
    "\3\6\7\0\4\6\1\117\1\6\7\0\24\6\4\0"+
    "\3\6\11\0\1\6\1\120\1\6\7\0\6\6\7\0"+
    "\1\6\1\121\22\6\4\0\3\6\11\0\1\6\1\122"+
    "\1\6\7\0\2\6\1\123\3\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\1\6\1\124\4\6\7\0"+
    "\7\6\1\125\1\6\1\126\12\6\40\0\1\127\73\0"+
    "\1\130\62\0\1\131\72\0\1\132\72\0\1\133\45\0"+
    "\3\6\11\0\3\6\7\0\3\6\1\134\1\6\1\135"+
    "\7\0\5\6\1\136\16\6\4\0\3\6\11\0\2\6"+
    "\1\137\7\0\6\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\6\6\7\0\1\6\1\140\5\6\1\141"+
    "\14\6\4\0\3\6\11\0\1\6\1\142\1\6\7\0"+
    "\1\6\1\143\4\6\7\0\1\6\1\144\22\6\4\0"+
    "\3\6\11\0\3\6\7\0\6\6\7\0\1\6\1\145"+
    "\22\6\4\0\3\6\11\0\1\6\1\146\1\6\7\0"+
    "\6\6\7\0\24\6\30\0\1\147\47\0\2\150\70\0"+
    "\3\6\11\0\2\6\1\151\7\0\6\6\7\0\24\6"+
    "\4\0\3\6\11\0\1\152\2\6\7\0\6\6\7\0"+
    "\24\6\4\0\3\6\11\0\3\6\7\0\1\6\1\153"+
    "\4\6\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\10\6\1\154\2\6\1\155\10\6\4\0"+
    "\3\6\11\0\3\6\7\0\5\6\1\156\7\0\24\6"+
    "\4\0\3\6\11\0\3\6\7\0\4\6\1\157\1\6"+
    "\7\0\24\6\4\0\3\6\11\0\2\6\1\160\7\0"+
    "\6\6\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\5\6\1\161\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\6\6\7\0\5\6\1\162\16\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\2\6\1\163\21\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\1\164"+
    "\23\6\4\0\3\6\11\0\3\6\7\0\4\6\1\165"+
    "\1\6\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\23\6\1\166\4\0\3\6\11\0\3\6"+
    "\7\0\6\6\7\0\16\6\1\167\5\6\4\0\3\6"+
    "\11\0\3\6\7\0\2\6\1\170\3\6\7\0\24\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\5\6"+
    "\1\171\16\6\4\0\3\6\11\0\1\6\1\172\1\6"+
    "\7\0\6\6\7\0\24\6\4\0\3\6\11\0\2\6"+
    "\1\173\7\0\6\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\5\6\1\174\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\11\6\1\175\12\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\1\176"+
    "\23\6\4\0\3\6\11\0\3\6\7\0\6\6\7\0"+
    "\23\6\1\177\4\0\3\6\11\0\3\6\7\0\2\6"+
    "\1\200\3\6\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\2\6\1\201\3\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\11\6\1\202\12\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\1\6"+
    "\1\203\22\6\4\0\3\6\11\0\3\6\7\0\2\6"+
    "\1\204\3\6\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\5\6\1\205\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\1\206\5\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\6\6\1\207\15\6"+
    "\4\0\3\6\11\0\3\6\7\0\5\6\1\210\7\0"+
    "\24\6\4\0\3\6\11\0\3\6\7\0\3\6\1\211"+
    "\2\6\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\1\212\23\6\4\0\3\6\11\0\1\6"+
    "\1\213\1\6\7\0\6\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\2\6\1\214\3\6\7\0\24\6"+
    "\4\0\3\6\11\0\1\6\1\215\1\6\7\0\6\6"+
    "\7\0\24\6\4\0\3\6\11\0\3\6\7\0\1\216"+
    "\5\6\7\0\4\6\1\217\17\6\4\0\3\6\11\0"+
    "\2\6\1\220\7\0\6\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\5\6\1\221\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\6\6\7\0\7\6\1\222"+
    "\14\6\4\0\3\6\11\0\3\6\7\0\6\6\7\0"+
    "\5\6\1\223\16\6\4\0\3\6\11\0\2\6\1\224"+
    "\7\0\6\6\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\6\6\7\0\11\6\1\225\12\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\14\6\1\226\7\6"+
    "\4\0\3\6\11\0\3\6\7\0\2\6\1\227\3\6"+
    "\7\0\24\6\4\0\3\6\11\0\3\6\7\0\6\6"+
    "\7\0\21\6\1\230\2\6\4\0\3\6\11\0\3\6"+
    "\7\0\1\231\5\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\1\232\5\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\1\233\5\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\1\234\5\6\7\0\24\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\23\6"+
    "\1\235\4\0\3\6\11\0\3\6\7\0\6\6\7\0"+
    "\17\6\1\236\4\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\3\6\1\237\20\6\4\0\3\6\11\0"+
    "\3\6\7\0\6\6\7\0\1\240\23\6\4\0\3\6"+
    "\11\0\1\6\1\241\1\6\7\0\6\6\7\0\24\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\15\6"+
    "\1\242\6\6\4\0\3\6\11\0\3\6\7\0\2\6"+
    "\1\243\3\6\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\5\6\1\244\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\2\6\1\245\3\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\2\6\1\246\3\6\7\0"+
    "\24\6\4\0\3\6\11\0\3\6\7\0\6\6\7\0"+
    "\5\6\1\247\16\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\7\6\1\250\14\6\4\0\3\6\11\0"+
    "\2\6\1\251\7\0\6\6\7\0\24\6\4\0\3\6"+
    "\11\0\3\6\7\0\6\6\7\0\20\6\1\252\3\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\5\6"+
    "\1\253\16\6\4\0\3\6\11\0\3\6\7\0\1\254"+
    "\5\6\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\1\255\5\6\7\0\24\6\4\0\3\6\11\0\3\6"+
    "\7\0\2\6\1\256\3\6\7\0\24\6\4\0\3\6"+
    "\11\0\2\6\1\257\7\0\6\6\7\0\24\6\4\0"+
    "\3\6\11\0\2\6\1\260\7\0\6\6\7\0\24\6"+
    "\4\0\3\6\11\0\3\6\7\0\6\6\7\0\16\6"+
    "\1\261\5\6\4\0\3\6\11\0\3\6\7\0\6\6"+
    "\7\0\1\262\23\6\4\0\3\6\11\0\3\6\7\0"+
    "\3\6\1\263\2\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\1\6\1\264\4\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\6\6\7\0\12\6\1\265"+
    "\11\6\4\0\3\6\11\0\3\6\7\0\6\6\7\0"+
    "\12\6\1\266\11\6\4\0\3\6\11\0\3\6\7\0"+
    "\2\6\1\267\3\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\6\6\7\0\5\6\1\270\16\6\4\0"+
    "\3\6\11\0\3\6\7\0\2\6\1\271\3\6\7\0"+
    "\24\6\4\0\3\6\11\0\1\6\1\272\1\6\7\0"+
    "\6\6\7\0\24\6\4\0\3\6\11\0\1\6\1\273"+
    "\1\6\7\0\6\6\7\0\24\6\4\0\3\6\11\0"+
    "\3\6\7\0\6\6\7\0\17\6\1\274\4\6\4\0"+
    "\3\6\11\0\3\6\7\0\6\6\7\0\6\6\1\275"+
    "\15\6\4\0\3\6\11\0\3\6\7\0\5\6\1\276"+
    "\7\0\24\6\4\0\3\6\11\0\3\6\7\0\5\6"+
    "\1\277\7\0\24\6\4\0\3\6\11\0\3\6\7\0"+
    "\6\6\7\0\20\6\1\300\3\6\4\0\3\6\11\0"+
    "\3\6\7\0\2\6\1\301\3\6\7\0\24\6\4\0"+
    "\3\6\11\0\3\6\7\0\2\6\1\302\3\6\7\0"+
    "\24\6\4\0\3\6\11\0\3\6\7\0\3\6\1\303"+
    "\2\6\7\0\24\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7257];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\3\1\5\11\2\1\2\11\2\1"+
    "\1\11\2\1\1\11\7\1\2\0\3\1\2\11\6\1"+
    "\1\11\5\1\1\11\16\1\2\0\1\11\1\0\3\1"+
    "\5\11\12\1\5\11\13\1\1\11\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 63: break;
        case 2: 
          { return symbol(sym.ID, yytext());
          }
        case 64: break;
        case 3: 
          { return symbol(sym.INTEGRAL, yytext());
          }
        case 65: break;
        case 4: 
          { return symbol(sym.POINT, ".");
          }
        case 66: break;
        case 5: 
          { return symbol(sym.SEMICOLON, ";");
          }
        case 67: break;
        case 6: 
          { return symbol(sym.COMMA, ",");
          }
        case 68: break;
        case 7: 
          { return symbol(sym.LEFT_ROUND_BRACKETS, "(");
          }
        case 69: break;
        case 8: 
          { return symbol(sym.RIGHT_ROUND_BRACKETS, ")");
          }
        case 70: break;
        case 9: 
          { return symbol(sym.DOUBLE_QUOTE, "\"");
          }
        case 71: break;
        case 10: 
          { return symbol(sym.SINGLE_QUOTE, "'");
          }
        case 72: break;
        case 11: 
          { return symbol(sym.LEFT_SQUARE_BRACKETS, "[");
          }
        case 73: break;
        case 12: 
          { return symbol(sym.RIGHT_SQUARE_BRACKETS, "]");
          }
        case 74: break;
        case 13: 
          { return symbol(sym.ESCAPE, "\\");
          }
        case 75: break;
        case 14: 
          { return symbol(sym.ADDITION, "+");
          }
        case 76: break;
        case 15: 
          { return symbol(sym.SUBTRACTION, "-");
          }
        case 77: break;
        case 16: 
          { return symbol(sym.MULTIPLICATION, "*");
          }
        case 78: break;
        case 17: 
          { return symbol(sym.DIVISION, "/");
          }
        case 79: break;
        case 18: 
          { return symbol(sym.ASSIGNMENT, "=");
          }
        case 80: break;
        case 19: 
          { return symbol(sym.NOT, "!");
          }
        case 81: break;
        case 20: 
          { System.out.println("*>* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.GREATER, ">");
          }
        case 82: break;
        case 21: 
          { System.out.println("*<* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.LESS, "<");
          }
        case 83: break;
        case 22: 
          { return symbol(sym.BLOCK_BEGIN, "{");
          }
        case 84: break;
        case 23: 
          { return symbol(sym.BLOCK_BEGIN, "}");
          }
        case 85: break;
        case 24: 
          { 
          }
        case 86: break;
        case 25: 
          { return symbol(sym.STRING, yytext());
          }
        case 87: break;
        case 26: 
          { return symbol(sym.INCREMENT, "++");
          }
        case 88: break;
        case 27: 
          { return symbol(sym.DECREMENT, "--");
          }
        case 89: break;
        case 28: 
          { yybegin(COMMENT_BLOCK);
          }
        case 90: break;
        case 29: 
          { yybegin(COMMENT_LINE);
          }
        case 91: break;
        case 30: 
          { System.out.println("*==* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.EQUAL, "==");
          }
        case 92: break;
        case 31: 
          { System.out.println("*&&* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.AND, "&&");
          }
        case 93: break;
        case 32: 
          { System.out.println("*||* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.OR, "||");
          }
        case 94: break;
        case 33: 
          { System.out.println("*!=* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.NOT_EQUAL, "!=");
          }
        case 95: break;
        case 34: 
          { System.out.println("*>=* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.GREATER_EQUAL, ">=");
          }
        case 96: break;
        case 35: 
          { System.out.println("*<=* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.LESS_EQUAL, "<=");
          }
        case 97: break;
        case 36: 
          { return symbol(sym.IF, "if");
          }
        case 98: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 99: break;
        case 38: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 100: break;
        case 39: 
          { System.out.println("*var* identificado" + " - " + yychar + " - " + yyline);
					return symbol(sym.VAR, "var");
          }
        case 101: break;
        case 40: 
          { return symbol(sym.FOR, "for");
          }
        case 102: break;
        case 41: 
          { return symbol(sym., "pop");
          }
        case 103: break;
        case 42: 
          { return symbol(sym.NAN, "NaN");
          }
        case 104: break;
        case 43: 
          { System.out.println("*true* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.TRUE, "true");
          }
        case 105: break;
        case 44: 
          { return symbol(sym.ELSE, "else");
          }
        case 106: break;
        case 45: 
          { return symbol(sym., "push");
          }
        case 107: break;
        case 46: 
          { return symbol(sym., "join");
          }
        case 108: break;
        case 47: 
          { System.out.println("*false* identificado" + " - " + yychar + " - " + yyline);
			return symbol(sym.FALSE, "false");
          }
        case 109: break;
        case 48: 
          { return symbol(sym., "shift");
          }
        case 110: break;
        case 49: 
          { return symbol(sym.SPLIT, "split");
          }
        case 111: break;
        case 50: 
          { return symbol(sym.IS_NAN, "isNaN");
          }
        case 112: break;
        case 51: 
          { return symbol(sym.BREAK, "break");
          }
        case 113: break;
        case 52: 
          { return symbol(sym.PARSE, "parse");
          }
        case 114: break;
        case 53: 
          { return symbol(sym.LENGTH, "length");
          }
        case 115: break;
        case 54: 
          { return symbol(sym.CONCAT, "concat");
          }
        case 116: break;
        case 55: 
          { return symbol(sym.CHAR_AT, "charAt");
          }
        case 117: break;
        case 56: 
          { return symbol(sym., "reverse");
          }
        case 118: break;
        case 57: 
          { return symbol(sym.INDEX_OF, "indexOf");
          }
        case 119: break;
        case 58: 
          { return symbol(sym.CONTINUE, "continue");
          }
        case 120: break;
        case 59: 
          { return symbol(sym.SUBSTRING, "substring");
          }
        case 121: break;
        case 60: 
          { return symbol(sym.TO_UPPER_CASE, "toUpperCase");
          }
        case 122: break;
        case 61: 
          { return symbol(sym.TO_LOWER_CASE, "toLowerCase");
          }
        case 123: break;
        case 62: 
          { return symbol(sym.LAST_INDEX_OF, "lastIndexOf");
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
