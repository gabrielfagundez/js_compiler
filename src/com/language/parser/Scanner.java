/* The following code was generated by JFlex 1.4.1 on 7/3/14 9:00 PM */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.exceptions.*;
import com.language.model.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/3/14 9:00 PM from the specification file
 * <tt>language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 1;
  public static final int COMMENT_BLOCK = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\2\1\0\1\3\1\1\22\0\1\3\1\52\1\30"+
    "\1\0\1\4\1\0\1\50\1\31\1\26\1\27\1\42\1\40\1\25"+
    "\1\41\1\7\1\43\1\6\11\5\1\46\1\24\1\54\1\44\1\53"+
    "\1\45\1\0\1\67\1\4\1\65\5\4\1\73\2\4\1\66\1\4"+
    "\1\75\1\72\5\4\1\64\5\4\1\32\1\37\1\33\1\0\1\4"+
    "\1\0\1\35\1\60\1\17\1\70\1\14\1\16\1\23\1\57\1\20"+
    "\1\74\1\61\1\12\1\4\1\10\1\21\1\63\1\4\1\13\1\22"+
    "\1\15\1\11\1\34\1\47\1\71\1\62\1\4\1\55\1\51\1\56"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\2\3\1\4\11\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\2\0\1\25\1\26\1\27\1\30\1\31\4\2\17\32"+
    "\1\21\7\32\1\20\1\0\17\2\1\33\4\2\1\0"+
    "\1\34\1\0\1\34\1\2\1\35\1\36\1\37\1\40"+
    "\1\41\1\2\1\42\1\43\1\44\1\45\1\46\6\2"+
    "\1\47\1\50\1\2\1\51\12\2\1\52\10\2\1\53"+
    "\3\2\1\54\2\2\1\55\1\56\4\2\1\57\1\60"+
    "\20\2\1\61\1\2\1\62\10\2\1\63\5\2\1\64"+
    "\1\2\1\65\1\66\1\67\1\70\1\71\1\72\1\2"+
    "\1\73\3\2\1\74\2\2\1\75\1\2\1\76\3\2"+
    "\1\77\5\2\1\100\4\2\1\101\1\102\1\0\4\2"+
    "\1\0\1\103\3\2\1\0\1\104\1\105\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\370\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\370\0\370\0\370\0\370\0\u041e\0\u045c"+
    "\0\370\0\370\0\u049a\0\370\0\u04d8\0\u0516\0\370\0\u0554"+
    "\0\u0592\0\370\0\370\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\370\0\370\0\u0744\0\u0782\0\u07c0\0\u07fe\0\370"+
    "\0\272\0\u0136\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u049a\0\370\0\u05d0"+
    "\0\u060e\0\u064c\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0136"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u041e\0\370\0\u045c\0\u045c"+
    "\0\u0d52\0\370\0\370\0\370\0\370\0\370\0\u0d90\0\370"+
    "\0\370\0\370\0\370\0\370\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\370\0\u087a\0\u0f42\0\u0136\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u0136\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u0136\0\u13dc\0\u141a\0\u1458\0\u0136\0\u1496\0\u14d4"+
    "\0\u0136\0\u0136\0\u1512\0\u1550\0\u158e\0\u15cc\0\u0136\0\u0136"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u0136\0\u19ea\0\u0136\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u1bda\0\u0136\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u0136\0\u1d4e\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u1d8c\0\u0136\0\u1dca\0\u1e08\0\u1e46\0\u0136\0\u1e84"+
    "\0\u1ec2\0\u0136\0\u1f00\0\u0136\0\u1f3e\0\u1f7c\0\u1fba\0\u0136"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u0136\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u0136\0\u0136\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u0136\0\u239a\0\u23d8\0\u2416\0\u2454\0\u0136"+
    "\0\u0136\0\u0136\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\6\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\6\1\22\1\6\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\6\1\5\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\6\1\54"+
    "\2\6\1\55\10\6\1\56\1\57\1\60\1\61\1\5"+
    "\1\60\1\62\1\63\1\64\1\11\1\65\1\62\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\62\1\75"+
    "\1\62\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\76\1\62\1\5\1\34\1\35\1\36\1\37"+
    "\1\77\1\41\1\42\1\43\1\100\1\101\1\102\1\47"+
    "\1\50\1\51\2\60\1\62\1\103\2\62\1\104\10\62"+
    "\1\105\1\106\1\60\1\61\1\5\1\60\1\62\1\63"+
    "\1\64\1\11\1\65\1\62\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\62\1\75\1\62\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\76\1\62"+
    "\1\5\1\34\1\35\1\36\1\107\1\77\1\41\1\42"+
    "\1\43\1\100\1\101\1\102\1\47\1\50\1\51\2\60"+
    "\1\62\1\103\2\62\1\104\10\62\1\105\1\106\2\0"+
    "\1\5\175\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\5\0\2\7\1\110\75\0\1\110"+
    "\72\0\3\6\1\0\1\6\1\111\2\6\1\112\7\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\4\6\1\113\7\6\10\0\1\6\1\114\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\4\6\1\115"+
    "\7\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\2\6\1\116\11\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\3\6\1\117"+
    "\5\6\1\120\2\6\10\0\2\6\11\0\1\6\7\0"+
    "\3\6\1\121\13\6\4\0\3\6\1\0\1\6\1\122"+
    "\7\6\1\123\2\6\10\0\1\6\1\124\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\11\6\1\125\2\6"+
    "\10\0\2\6\11\0\1\6\7\0\1\126\16\6\4\0"+
    "\3\6\1\0\1\127\5\6\1\130\3\6\1\131\1\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\1\6\1\132\12\6\10\0\2\6\11\0\1\6"+
    "\7\0\1\133\3\6\1\134\12\6\1\135\2\0\25\135"+
    "\1\136\5\135\1\0\37\135\1\137\2\0\25\137\1\0"+
    "\1\140\4\137\1\0\37\137\4\0\3\6\1\0\14\6"+
    "\10\0\1\6\1\141\11\0\1\6\7\0\17\6\40\0"+
    "\1\142\76\0\1\143\76\0\1\144\1\145\76\0\1\146"+
    "\35\0\3\6\1\0\14\6\10\0\2\6\11\0\1\6"+
    "\7\0\1\147\16\6\50\0\1\150\76\0\1\151\70\0"+
    "\1\152\75\0\1\153\75\0\1\154\35\0\3\6\1\0"+
    "\3\6\1\155\10\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\1\6\1\156\7\6\1\157"+
    "\2\6\10\0\1\6\1\160\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\11\6\1\161\2\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\0\14\6"+
    "\10\0\1\6\1\162\11\0\1\6\7\0\17\6\43\0"+
    "\1\163\37\0\2\164\73\0\3\6\1\0\2\6\1\165"+
    "\11\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\14\6\10\0\2\6\11\0\1\166\7\0"+
    "\17\6\4\0\3\6\1\0\1\167\13\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\0\12\6"+
    "\1\170\1\6\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\5\6\1\171\6\6\10\0\1\172"+
    "\1\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\12\6\1\173\1\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\1\6\1\174\12\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\5\6\1\175"+
    "\1\6\1\176\7\6\4\0\3\6\1\0\14\6\10\0"+
    "\2\6\11\0\1\6\7\0\4\6\1\177\12\6\4\0"+
    "\3\6\1\0\1\200\13\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\3\6\1\201\10\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\2\6\1\202\11\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\1\203\13\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\1\6\1\204\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\14\6\10\0\2\6\11\0\1\6"+
    "\7\0\11\6\1\205\5\6\4\0\3\6\1\0\14\6"+
    "\10\0\2\6\11\0\1\6\7\0\16\6\1\206\4\0"+
    "\3\6\1\0\14\6\10\0\2\6\11\0\1\6\7\0"+
    "\1\6\1\207\15\6\4\0\3\6\1\0\10\6\1\210"+
    "\3\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\2\6\1\211\11\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\3\6\1\212"+
    "\10\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\10\6\1\213\3\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\4\6\1\214"+
    "\7\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\12\6\1\215\1\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\14\6\10\0"+
    "\2\6\11\0\1\6\7\0\4\6\1\216\12\6\4\0"+
    "\3\6\1\0\3\6\1\217\10\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\10\6\1\220"+
    "\3\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\14\6\10\0\2\6\11\0\1\6\7\0"+
    "\16\6\1\221\4\0\3\6\1\0\2\6\1\222\11\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\13\6\1\223\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\224\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\1\6\1\225\12\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\4\6\1\226\7\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\4\6\1\227\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\4\6\1\230\7\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\4\6\1\231"+
    "\12\6\4\0\3\6\1\0\11\6\1\232\2\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\4\6\1\233\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\7\6\1\234\4\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\12\6\1\235\1\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\236\1\6\1\237"+
    "\2\6\1\240\1\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\3\6\1\241\10\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\4\6\1\242\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\14\6\10\0\1\6\1\243"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\0\12\6"+
    "\1\244\1\6\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\6\6\1\245\5\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\0\10\6"+
    "\1\246\3\6\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\2\6\1\247\11\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\0\14\6"+
    "\10\0\1\6\1\250\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\14\6\10\0\2\6\11\0\1\6\7\0"+
    "\1\251\16\6\4\0\3\6\1\0\12\6\1\252\1\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\1\253\13\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\254\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\14\6\1\255"+
    "\2\6\4\0\3\6\1\0\3\6\1\256\10\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\3\6\1\257\10\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\4\6\1\260\12\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\261\7\0\17\6\4\0"+
    "\3\6\1\0\11\6\1\262\2\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\5\6\1\263"+
    "\6\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\4\6\1\264\7\6\10\0\2\6\11\0"+
    "\1\6\7\0\17\6\4\0\3\6\1\0\10\6\1\265"+
    "\3\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\14\6\10\0\1\6\1\266\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\11\6\1\267\2\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\14\6\10\0\2\6\11\0\1\6\7\0\10\6"+
    "\1\270\6\6\4\0\3\6\1\0\14\6\10\0\2\6"+
    "\11\0\1\6\7\0\12\6\1\271\4\6\4\0\3\6"+
    "\1\0\14\6\10\0\2\6\11\0\1\6\7\0\16\6"+
    "\1\272\4\0\3\6\1\0\5\6\1\273\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\5\6\1\274\6\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\275\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\4\6\1\276\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\2\6\1\277\14\6\4\0\3\6\1\0"+
    "\4\6\1\300\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\1\301\16\6\4\0\3\6\1\0\1\302"+
    "\13\6\10\0\2\6\11\0\1\6\7\0\17\6\4\0"+
    "\3\6\1\0\1\303\13\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\12\6\1\304\1\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\4\6\1\305\7\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\4\6\1\306\7\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\6\6\1\307\5\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\10\6\1\310\3\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\1\311\13\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\312\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\2\6\1\313\11\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\5\6\1\314\6\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\13\6\1\315"+
    "\3\6\4\0\3\6\1\0\3\6\1\316\10\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\11\6\1\317"+
    "\5\6\4\0\3\6\1\0\4\6\1\320\7\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\3\6\1\321\10\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\3\6\1\322\10\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\11\6\1\323\2\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\1\6\1\324\12\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\4\6\1\325\7\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\6\6\1\326\5\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\10\6\1\327\3\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\4\6\1\330\7\6\10\0"+
    "\2\6\11\0\1\6\7\0\17\6\4\0\3\6\1\0"+
    "\14\6\10\0\2\6\11\0\1\6\7\0\6\6\1\331"+
    "\10\6\4\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\6\6\1\332\10\6\4\0\3\6\1\0"+
    "\1\333\13\6\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\4\6\1\334\7\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\4\0\3\6\1\335\14\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\1\336\13\6\10\0\2\6\11\0\1\6\7\0"+
    "\17\6\4\0\3\6\1\0\14\6\10\0\2\6\11\0"+
    "\1\6\7\0\12\6\1\337\4\6\4\0\3\6\1\0"+
    "\14\6\10\0\1\6\1\340\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\14\6\10\0\1\6\1\341\11\0"+
    "\1\6\7\0\17\6\12\0\1\342\67\0\3\6\1\0"+
    "\13\6\1\343\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\14\6\10\0\2\6\11\0\1\6"+
    "\7\0\13\6\1\344\3\6\4\0\3\6\1\0\12\6"+
    "\1\345\1\6\10\0\2\6\11\0\1\6\7\0\17\6"+
    "\4\0\3\6\1\0\12\6\1\346\1\6\10\0\2\6"+
    "\11\0\1\6\7\0\17\6\21\0\1\347\60\0\3\6"+
    "\1\0\6\6\1\350\5\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\4\0\3\6\1\0\4\6\1\351\7\6"+
    "\10\0\2\6\11\0\1\6\7\0\17\6\4\0\3\6"+
    "\1\0\4\6\1\352\7\6\10\0\2\6\11\0\1\6"+
    "\7\0\17\6\23\0\1\353\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9362];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\3\1\1\11\11\1\4\11\2\1"+
    "\2\11\1\1\1\11\2\1\1\11\2\1\2\11\1\1"+
    "\2\0\3\1\2\11\4\1\1\11\16\1\1\11\10\1"+
    "\1\0\24\1\1\0\1\11\1\0\2\1\5\11\1\1"+
    "\5\11\6\1\1\11\151\1\1\0\4\1\1\0\4\1"+
    "\1\0\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { return symbol(sym.SUBSTRING_FUNCT, "substring");
          }
        case 72: break;
        case 60: 
          { return symbol(sym.TYPEOF_FUNCT, "typeof");
          }
        case 73: break;
        case 58: 
          { return symbol(sym.LENGTH_FUNCT, "length");
          }
        case 74: break;
        case 28: 
          { return symbol(sym.STRING, yytext());
          }
        case 75: break;
        case 38: 
          { return symbol(sym.LESS_EQUAL, "<=");
          }
        case 76: break;
        case 4: 
          { return symbol(sym.POINT, ".");
          }
        case 77: break;
        case 5: 
          { return symbol(sym.SEMICOLON, ";");
          }
        case 78: break;
        case 10: 
          { return symbol(sym.SINGLE_QUOTE, "'");
          }
        case 79: break;
        case 40: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 80: break;
        case 2: 
          { return symbol(sym.ID, yytext());
          }
        case 81: break;
        case 6: 
          { return symbol(sym.COMMA, ",");
          }
        case 82: break;
        case 68: 
          { return symbol(sym.LAST_INDEX_OF_FUNCT, "lastIndexOf");
          }
        case 83: break;
        case 51: 
          { return symbol(sym.FALSE, "false");
          }
        case 84: break;
        case 59: 
          { return symbol(sym.RETURN, "return");
          }
        case 85: break;
        case 46: 
          { return symbol(sym.NULL, "null");
          }
        case 86: break;
        case 36: 
          { return symbol(sym.NOT_EQUAL, "!=");
          }
        case 87: break;
        case 44: 
          { return symbol(sym.POP_FUNCT, "pop");
          }
        case 88: break;
        case 65: 
          { return symbol(sym.FUNCTION, "function");
          }
        case 89: break;
        case 31: 
          { yybegin(COMMENT_BLOCK);
          }
        case 90: break;
        case 29: 
          { return symbol(sym.INCREMENT, "++");
          }
        case 91: break;
        case 53: 
          { return symbol(sym.SHIFT_FUNCT, "shift");
          }
        case 92: break;
        case 24: 
          { return symbol(sym.BLOCK_BEGIN, "{");
          }
        case 93: break;
        case 15: 
          { return symbol(sym.MINUS, "-");
          }
        case 94: break;
        case 9: 
          { return symbol(sym.DOUBLE_QUOTE, "\"");
          }
        case 95: break;
        case 62: 
          { return symbol(sym.CHAR_AT_FUNCT, "charAt");
          }
        case 96: break;
        case 27: 
          { return symbol(sym.IF, "if");
          }
        case 97: break;
        case 39: 
          { yybegin(YYINITIAL);
          }
        case 98: break;
        case 13: 
          { return symbol(sym.ESCAPE, "\\");
          }
        case 99: break;
        case 3: 
          { return symbol(sym.INTEGRAL, yytext());
          }
        case 100: break;
        case 48: 
          { return symbol(sym.TRUE, "true");
          }
        case 101: break;
        case 1: 
          { /* Ignore */
          }
        case 102: break;
        case 33: 
          { return symbol(sym.EQUAL_EQUAL, "==");
          }
        case 103: break;
        case 21: 
          { return symbol(sym.NOT, "!");
          }
        case 104: break;
        case 23: 
          { return symbol(sym.LESS, "<");
          }
        case 105: break;
        case 63: 
          { return symbol(sym.REVERSE_FUNCT, "reverse");
          }
        case 106: break;
        case 55: 
          { return symbol(sym.WHILE, "while");
          }
        case 107: break;
        case 19: 
          { return symbol(sym.QUEST, "?");
          }
        case 108: break;
        case 18: 
          { return symbol(sym.EQUAL, "=");
          }
        case 109: break;
        case 43: 
          { return symbol(sym.VAR, "var");
          }
        case 110: break;
        case 14: 
          { return symbol(sym.PLUS, "+");
          }
        case 111: break;
        case 35: 
          { return symbol(sym.OR, "||");
          }
        case 112: break;
        case 52: 
          { return symbol(sym.IS_NAN, "isNaN");
          }
        case 113: break;
        case 20: 
          { return symbol(sym.COLON, ":");
          }
        case 114: break;
        case 50: 
          { return symbol(sym.JOIN_FUNCT, "join");
          }
        case 115: break;
        case 22: 
          { return symbol(sym.GREATER, ">");
          }
        case 116: break;
        case 47: 
          { return symbol(sym.ELSE, "else");
          }
        case 117: break;
        case 64: 
          { return symbol(sym.INDEX_OF_FUNCT, "indexOf");
          }
        case 118: break;
        case 69: 
          { return symbol(sym.TO_UPPER_CASE_FUNCT, "toUpperCase");
          }
        case 119: break;
        case 71: 
          { return symbol(sym.CONSOLE_LOG, "console.log");
          }
        case 120: break;
        case 70: 
          { return symbol(sym.TO_LOWER_CASE_FUNCT, "toLowerCase");
          }
        case 121: break;
        case 7: 
          { return symbol(sym.LEFT_ROUND_BRACKET, "(");
          }
        case 122: break;
        case 17: 
          { return symbol(sym.DIV, "/");
          }
        case 123: break;
        case 8: 
          { return symbol(sym.RIGHT_ROUND_BRACKET, ")");
          }
        case 124: break;
        case 61: 
          { return symbol(sym.CONCAT_FUNCT, "concat");
          }
        case 125: break;
        case 56: 
          { return symbol(sym.BREAK, "break");
          }
        case 126: break;
        case 54: 
          { return symbol(sym.SPLIT_FUNCT, "split");
          }
        case 127: break;
        case 41: 
          { return symbol(sym.NEW, "new");
          }
        case 128: break;
        case 57: 
          { return symbol(sym.PARSE_FUNCT, "parse");
          }
        case 129: break;
        case 16: 
          { return symbol(sym.TIMES, "*");
          }
        case 130: break;
        case 12: 
          { return symbol(sym.RIGHT_SQUARE_BRACKET, "]");
          }
        case 131: break;
        case 49: 
          { return symbol(sym.PUSH_FUNCT, "push");
          }
        case 132: break;
        case 32: 
          { yybegin(COMMENT_LINE);
          }
        case 133: break;
        case 34: 
          { return symbol(sym.AND, "&&");
          }
        case 134: break;
        case 42: 
          { return symbol(sym.FOR, "for");
          }
        case 135: break;
        case 30: 
          { return symbol(sym.DECREMENT, "--");
          }
        case 136: break;
        case 45: 
          { return symbol(sym.NAN, "NaN");
          }
        case 137: break;
        case 11: 
          { return symbol(sym.LEFT_SQUARE_BRACKET, "[");
          }
        case 138: break;
        case 66: 
          { return symbol(sym.CONTINUE, "continue");
          }
        case 139: break;
        case 37: 
          { return symbol(sym.GREATER_EQUAL, ">=");
          }
        case 140: break;
        case 25: 
          { return symbol(sym.BLOCK_END, "}");
          }
        case 141: break;
        case 26: 
          { 
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
