/* The following code was generated by JFlex 1.4.1 on 6/29/14 4:28 PM */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.exceptions.*;
import com.language.model.expression.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/29/14 4:28 PM from the specification file
 * <tt>language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 1;
  public static final int COMMENT_BLOCK = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\2\1\0\1\3\1\1\22\0\1\3\1\43\1\17"+
    "\1\0\1\4\1\0\1\41\1\20\1\15\1\16\1\32\1\30\1\14"+
    "\1\31\1\7\1\33\1\6\11\5\1\0\1\13\1\45\1\34\1\44"+
    "\2\0\1\64\1\4\1\61\5\4\1\70\2\4\1\62\1\4\1\72"+
    "\1\67\5\4\1\57\5\4\1\21\1\27\1\22\1\0\1\4\1\0"+
    "\1\24\1\52\1\54\1\65\1\36\1\37\1\55\1\56\1\50\1\71"+
    "\1\53\1\12\1\4\1\10\1\51\1\60\1\4\1\25\1\40\1\35"+
    "\1\11\1\23\1\63\1\66\2\4\1\46\1\42\1\47\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\2\4\1\5\2\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\4\3\2\0\1\25\1\26\1\27\1\30\1\31\6\3"+
    "\11\32\1\23\14\32\1\22\1\0\3\3\1\0\1\33"+
    "\1\0\1\33\2\3\1\34\1\35\1\36\1\37\1\40"+
    "\10\3\1\41\1\42\1\43\1\44\1\45\1\3\1\46"+
    "\11\3\1\47\1\50\3\3\1\51\6\3\1\52\12\3"+
    "\1\53\1\3\1\54\1\55\3\3\1\56\2\3\1\57"+
    "\12\3\1\60\1\3\1\61\5\3\1\62\1\3\1\63"+
    "\1\64\1\3\1\65\1\66\3\3\1\67\1\3\1\70"+
    "\6\3\1\71\1\72\1\3\1\73\3\3\1\74\5\3"+
    "\1\75\3\3\1\76\3\3\1\77\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\354\0\u01d8\0\u0213\0\354\0\354\0\354\0\354"+
    "\0\u024e\0\u0289\0\354\0\354\0\u02c4\0\u02ff\0\354\0\354"+
    "\0\u033a\0\u0375\0\354\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\354\0\354"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\354\0\261"+
    "\0\u0127\0\u0162\0\u019d\0\u01d8\0\u0213\0\u02c4\0\u02ff\0\354"+
    "\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u024e\0\354\0\u0289\0\u0289\0\u08c2\0\u08fd\0\354"+
    "\0\354\0\354\0\354\0\354\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\354\0\354\0\354\0\354"+
    "\0\354\0\u0b10\0\u0127\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\354\0\u07d6\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0127\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0127\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u0127\0\u11bf\0\u0127\0\u0127\0\u11fa"+
    "\0\u1235\0\u1270\0\u0127\0\u12ab\0\u12e6\0\u0127\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u0127\0\u156f\0\u0127\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u0127\0\u16d1\0\u0127\0\u0127\0\u170c\0\u0127\0\u0127\0\u1747"+
    "\0\u1782\0\u17bd\0\u0127\0\u17f8\0\u0127\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u0127\0\u0127\0\u1995\0\u0127\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u0127\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u0127\0\u1ba8\0\u1be3\0\u1c1e\0\u0127\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u0127\0\u0127\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\7\1\52\1\7\1\53\3\7\1\54\10\7"+
    "\1\55\1\56\1\57\1\60\1\5\1\57\1\61\1\62"+
    "\1\63\1\12\1\64\1\61\1\65\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\66\1\61\1\67"+
    "\1\27\1\30\1\31\1\32\1\33\1\70\1\35\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\44\1\45\1\46"+
    "\2\57\1\77\1\61\1\100\1\61\1\101\3\61\1\102"+
    "\10\61\1\103\1\104\1\57\1\60\1\5\1\57\1\61"+
    "\1\62\1\63\1\12\1\64\1\61\1\65\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\66\1\61"+
    "\1\67\1\27\1\30\1\31\1\32\1\105\1\70\1\35"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\44\1\45"+
    "\1\46\2\57\1\77\1\61\1\100\1\61\1\101\3\61"+
    "\1\102\10\61\1\103\1\104\2\0\1\6\167\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\4\7\7\0\23\7"+
    "\5\0\2\10\1\106\72\0\1\106\67\0\3\7\1\0"+
    "\1\7\1\107\1\7\10\0\3\7\7\0\4\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\1\7\1\110"+
    "\1\7\7\0\1\7\1\111\2\7\7\0\23\7\1\112"+
    "\2\0\14\112\1\113\6\112\1\0\44\112\1\114\2\0"+
    "\14\114\1\0\1\115\5\114\1\0\44\114\4\0\3\7"+
    "\1\0\3\7\10\0\1\7\1\116\1\7\7\0\4\7"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\1\7\1\117\2\7\7\0\23\7\30\0\1\120"+
    "\73\0\1\121\73\0\1\122\1\123\73\0\1\124\42\0"+
    "\3\7\1\0\3\7\10\0\2\7\1\125\7\0\4\7"+
    "\7\0\1\7\1\126\21\7\4\0\3\7\1\0\2\7"+
    "\1\127\10\0\3\7\7\0\4\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\1\7\1\130\1\7\7\0"+
    "\4\7\7\0\1\7\1\131\21\7\4\0\3\7\1\0"+
    "\1\7\1\132\1\7\10\0\3\7\7\0\4\7\7\0"+
    "\6\7\1\133\1\7\1\134\12\7\41\0\1\135\73\0"+
    "\1\136\64\0\1\137\72\0\1\140\72\0\1\141\42\0"+
    "\3\7\1\0\1\142\2\7\10\0\3\7\7\0\2\7"+
    "\1\143\1\144\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\2\7\1\145\7\0\4\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\1\7\1\146\4\7\1\147\14\7\4\0\3\7\1\0"+
    "\1\7\1\150\1\7\10\0\1\7\1\151\1\7\7\0"+
    "\4\7\7\0\1\7\1\152\21\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\4\7\7\0\1\7\1\153"+
    "\21\7\4\0\3\7\1\0\3\7\10\0\1\7\1\154"+
    "\1\7\7\0\4\7\7\0\23\7\33\0\1\155\44\0"+
    "\2\156\70\0\3\7\1\0\2\7\1\157\10\0\3\7"+
    "\7\0\4\7\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\3\7\1\160\7\0\23\7\4\0"+
    "\3\7\1\0\1\161\2\7\10\0\3\7\7\0\4\7"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\2\7"+
    "\1\162\7\0\4\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\1\163\2\7\7\0\4\7\7\0\23\7"+
    "\4\0\3\7\1\0\1\7\1\164\1\7\10\0\3\7"+
    "\7\0\4\7\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\4\7\7\0\7\7\1\165\2\7"+
    "\1\166\10\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\3\7\1\167\7\0\23\7\4\0\3\7\1\0"+
    "\2\7\1\170\10\0\3\7\7\0\4\7\7\0\23\7"+
    "\4\0\3\7\1\0\3\7\10\0\2\7\1\171\7\0"+
    "\4\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\4\7\7\0\2\7\1\172\20\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\1\173\22\7\4\0\3\7\1\0\2\7\1\174\10\0"+
    "\3\7\7\0\4\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\4\7\7\0\15\7\1\175"+
    "\5\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\4\7\7\0\22\7\1\176\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\1\7\1\177\2\7\7\0\23\7"+
    "\4\0\3\7\1\0\1\200\2\7\10\0\3\7\7\0"+
    "\4\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\1\7\1\201\1\7\7\0\4\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\3\7\1\202"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\2\7"+
    "\1\203\7\0\4\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\4\7\7\0\10\7\1\204"+
    "\12\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\4\7\7\0\1\205\22\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\4\7\7\0\22\7\1\206\4\0"+
    "\3\7\1\0\2\7\1\207\10\0\3\7\7\0\4\7"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\1\210\3\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\4\7\7\0\5\7\1\211"+
    "\15\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\1\7\1\212\2\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\1\7\1\213\2\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\4\7\7\0\10\7\1\214\12\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\4\7\7\0\1\7\1\215"+
    "\21\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\1\7\1\216\2\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\3\7\1\217\7\0\23\7"+
    "\4\0\3\7\1\0\3\7\10\0\3\7\7\0\3\7"+
    "\1\220\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\2\7\1\221\1\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\1\222\22\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\1\7\1\223\2\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\1\7\1\224\1\7\7\0\4\7"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\1\7"+
    "\1\225\1\7\7\0\4\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\1\226\3\7\7\0"+
    "\4\7\1\227\16\7\4\0\3\7\1\0\3\7\10\0"+
    "\2\7\1\230\7\0\4\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\4\7\7\0\6\7"+
    "\1\231\14\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\3\7\1\232\7\0\23\7\4\0\3\7\1\0"+
    "\1\233\2\7\10\0\3\7\7\0\4\7\7\0\23\7"+
    "\4\0\3\7\1\0\3\7\10\0\3\7\7\0\4\7"+
    "\7\0\20\7\1\234\2\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\1\235\3\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\2\7\1\236\7\0\4\7"+
    "\7\0\23\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\4\7\7\0\10\7\1\237\12\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\4\7\7\0\13\7"+
    "\1\240\7\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\1\7\1\241\2\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\1\242\3\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\1\243\3\7\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\1\244\3\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\16\7\1\245\4\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\4\7\7\0\22\7\1\246\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\4\7\7\0\3\7"+
    "\1\247\17\7\4\0\3\7\1\0\3\7\10\0\3\7"+
    "\7\0\4\7\7\0\1\250\22\7\4\0\3\7\1\0"+
    "\3\7\10\0\1\7\1\251\1\7\7\0\4\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\4\7\7\0\14\7\1\252\6\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\1\7\1\253\2\7\7\0"+
    "\23\7\4\0\3\7\1\0\1\254\2\7\10\0\3\7"+
    "\7\0\4\7\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\4\7\7\0\6\7\1\255\14\7"+
    "\4\0\3\7\1\0\3\7\10\0\3\7\7\0\3\7"+
    "\1\256\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\1\7\1\257\2\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\1\7\1\260"+
    "\2\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\2\7\1\261\7\0\4\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\4\7\7\0\17\7"+
    "\1\262\3\7\4\0\3\7\1\0\1\263\2\7\10\0"+
    "\3\7\7\0\4\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\1\264\3\7\7\0\23\7"+
    "\4\0\3\7\1\0\3\7\10\0\3\7\7\0\1\265"+
    "\3\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\4\7\7\0\15\7\1\266\5\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\1\7\1\267"+
    "\2\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\2\7\1\270\7\0\4\7\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\2\7\1\271\7\0\4\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\4\7\7\0\1\272\22\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\2\7\1\273\1\7\7\0\23\7"+
    "\4\0\3\7\1\0\1\7\1\274\1\7\10\0\3\7"+
    "\7\0\4\7\7\0\23\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\1\7\1\275\2\7\7\0\23\7"+
    "\4\0\3\7\1\0\3\7\10\0\3\7\7\0\4\7"+
    "\7\0\11\7\1\276\11\7\4\0\3\7\1\0\3\7"+
    "\10\0\3\7\7\0\4\7\7\0\11\7\1\277\11\7"+
    "\4\0\3\7\1\0\1\300\2\7\10\0\3\7\7\0"+
    "\4\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\1\7\1\301\2\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\16\7\1\302\4\7\4\0\3\7\1\0\3\7\10\0"+
    "\1\7\1\303\1\7\7\0\4\7\7\0\23\7\4\0"+
    "\3\7\1\0\3\7\10\0\1\7\1\304\1\7\7\0"+
    "\4\7\7\0\23\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\4\7\7\0\5\7\1\305\15\7\4\0"+
    "\3\7\1\0\3\7\10\0\3\7\7\0\4\7\7\0"+
    "\17\7\1\306\3\7\4\0\3\7\1\0\3\7\10\0"+
    "\3\7\7\0\3\7\1\307\7\0\23\7\4\0\3\7"+
    "\1\0\3\7\10\0\3\7\7\0\3\7\1\310\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\2\7\1\311\1\7\7\0\23\7\4\0\3\7\1\0"+
    "\3\7\10\0\3\7\7\0\1\7\1\312\2\7\7\0"+
    "\23\7\4\0\3\7\1\0\3\7\10\0\3\7\7\0"+
    "\1\7\1\313\2\7\7\0\23\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7434];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\3\1\1\11\2\1\4\11\2\1"+
    "\2\11\2\1\2\11\2\1\1\11\6\1\2\0\3\1"+
    "\2\11\6\1\1\11\10\1\1\11\15\1\1\0\3\1"+
    "\1\0\1\11\1\0\3\1\5\11\10\1\5\11\13\1"+
    "\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { return symbol(sym.SUBSTRING_FUNCT, "substring");
          }
        case 66: break;
        case 56: 
          { return symbol(sym.LENGTH_FUNCT, "length");
          }
        case 67: break;
        case 1: 
          { /* ignore */
          }
        case 68: break;
        case 27: 
          { return symbol(sym.STRING, yytext());
          }
        case 69: break;
        case 37: 
          { return symbol(sym.LESS_EQUAL, "<=");
          }
        case 70: break;
        case 5: 
          { return symbol(sym.POINT, ".");
          }
        case 71: break;
        case 13: 
          { return symbol(sym.RIGHT_SQUARE_BRACKETS, "]");
          }
        case 72: break;
        case 6: 
          { return symbol(sym.SEMICOLON, ";");
          }
        case 73: break;
        case 11: 
          { return symbol(sym.SINGLE_QUOTE, "'");
          }
        case 74: break;
        case 25: 
          { return symbol(sym.BLOCK_BEGIN, "}");
          }
        case 75: break;
        case 40: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 76: break;
        case 3: 
          { return symbol(sym.ID, yytext());
          }
        case 77: break;
        case 7: 
          { return symbol(sym.COMMA, ",");
          }
        case 78: break;
        case 63: 
          { return symbol(sym.LAST_INDEX_OF_FUNCT, "lastIndexOf");
          }
        case 79: break;
        case 50: 
          { return symbol(sym.FALSE, "false");
          }
        case 80: break;
        case 2: 
          { return symbol(sym.LINE_BREAK, "\n");
          }
        case 81: break;
        case 45: 
          { return symbol(sym.NULL, "null");
          }
        case 82: break;
        case 35: 
          { return symbol(sym.NOT_EQUAL, "!=");
          }
        case 83: break;
        case 43: 
          { return symbol(sym.POP_FUNCT, "pop");
          }
        case 84: break;
        case 30: 
          { yybegin(COMMENT_BLOCK);
          }
        case 85: break;
        case 28: 
          { return symbol(sym.INCREMENT, "++");
          }
        case 86: break;
        case 51: 
          { return symbol(sym.SHIFT_FUNCT, "shift");
          }
        case 87: break;
        case 16: 
          { return symbol(sym.ADDITION, "+");
          }
        case 88: break;
        case 24: 
          { return symbol(sym.BLOCK_BEGIN, "{");
          }
        case 89: break;
        case 10: 
          { return symbol(sym.DOUBLE_QUOTE, "\"");
          }
        case 90: break;
        case 58: 
          { return symbol(sym.CHAR_AT_FUNCT, "charAt");
          }
        case 91: break;
        case 38: 
          { return symbol(sym.IF, "if");
          }
        case 92: break;
        case 39: 
          { yybegin(YYINITIAL);
          }
        case 93: break;
        case 15: 
          { return symbol(sym.ESCAPE, "\\");
          }
        case 94: break;
        case 4: 
          { return symbol(sym.INTEGRAL, yytext());
          }
        case 95: break;
        case 46: 
          { return symbol(sym.TRUE, "true");
          }
        case 96: break;
        case 32: 
          { return symbol(sym.EQUAL_EQUAL, "==");
          }
        case 97: break;
        case 21: 
          { return symbol(sym.NOT, "!");
          }
        case 98: break;
        case 23: 
          { return symbol(sym.LESS, "<");
          }
        case 99: break;
        case 59: 
          { return symbol(sym.REVERSE_FUNCT, "reverse");
          }
        case 100: break;
        case 12: 
          { return symbol(sym.LEFT_SQUARE_BRACKETS, "[");
          }
        case 101: break;
        case 18: 
          { return symbol(sym.MULTIPLICATION, "*");
          }
        case 102: break;
        case 20: 
          { return symbol(sym.EQUAL, "=");
          }
        case 103: break;
        case 41: 
          { return symbol(sym.VAR, "var");
          }
        case 104: break;
        case 9: 
          { return symbol(sym.RIGHT_ROUND_BRACKETS, ")");
          }
        case 105: break;
        case 34: 
          { return symbol(sym.OR, "||");
          }
        case 106: break;
        case 53: 
          { return symbol(sym.IS_NAN, "isNaN");
          }
        case 107: break;
        case 49: 
          { return symbol(sym.JOIN_FUNCT, "join");
          }
        case 108: break;
        case 14: 
          { return symbol(sym.TABULATION, "\t");
          }
        case 109: break;
        case 22: 
          { return symbol(sym.GREATER, ">");
          }
        case 110: break;
        case 47: 
          { return symbol(sym.ELSE, "else");
          }
        case 111: break;
        case 19: 
          { return symbol(sym.DIVISION, "/");
          }
        case 112: break;
        case 60: 
          { return symbol(sym.INDEX_OF_FUNCT, "indexOf");
          }
        case 113: break;
        case 64: 
          { return symbol(sym.TO_UPPER_CASE_FUNCT, "toUpperCase");
          }
        case 114: break;
        case 65: 
          { return symbol(sym.TO_LOWER_CASE_FUNCT, "toLowerCase");
          }
        case 115: break;
        case 57: 
          { return symbol(sym.CONCAT_FUNCT, "concat");
          }
        case 116: break;
        case 54: 
          { return symbol(sym.BREAK, "break");
          }
        case 117: break;
        case 52: 
          { return symbol(sym.SPLIT_FUNCT, "split");
          }
        case 118: break;
        case 55: 
          { return symbol(sym.PARSE_FUNCT, "parse");
          }
        case 119: break;
        case 17: 
          { return symbol(sym.SUBTRACTION, "-");
          }
        case 120: break;
        case 48: 
          { return symbol(sym.PUSH_FUNCT, "push");
          }
        case 121: break;
        case 31: 
          { yybegin(COMMENT_LINE);
          }
        case 122: break;
        case 33: 
          { return symbol(sym.AND, "&&");
          }
        case 123: break;
        case 42: 
          { return symbol(sym.FOR, "for");
          }
        case 124: break;
        case 29: 
          { return symbol(sym.DECREMENT, "--");
          }
        case 125: break;
        case 44: 
          { return symbol(sym.NAN, "NaN");
          }
        case 126: break;
        case 61: 
          { return symbol(sym.CONTINUE, "continue");
          }
        case 127: break;
        case 36: 
          { return symbol(sym.GREATER_EQUAL, ">=");
          }
        case 128: break;
        case 8: 
          { return symbol(sym.LEFT_ROUND_BRACKETS, "(");
          }
        case 129: break;
        case 26: 
          { 
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
