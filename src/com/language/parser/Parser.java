
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 02 19:51:10 UYT 2014
//----------------------------------------------------

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 02 19:51:10 UYT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\043\003\000\002\045\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\004\000\002" +
    "\031\004\000\002\033\005\000\002\032\004\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\016\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\014\003\000\002\014\005\000\002\014\005\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\012\003\000\002\012\005\000" +
    "\002\012\005\000\002\011\003\000\002\011\005\000\002" +
    "\010\003\000\002\010\005\000\002\026\003\000\002\026" +
    "\007\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\020\003\000\002\020\005\000\002\041\003\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\004\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\042\003\000\002\044\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\022\006\021\016\057\017\034\032\007\033" +
    "\015\057\027\070\041\075\055\001\002\000\024\002\uffcb" +
    "\006\uffcb\016\uffcb\017\uffcb\032\uffcb\033\uffcb\057\uffcb\070" +
    "\uffcb\075\uffcb\001\002\000\050\006\ufff2\007\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\200\030\ufff2\031\ufff2\032" +
    "\117\033\116\036\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\001\002\000\004\006\133\001" +
    "\002\000\014\017\034\032\007\033\015\057\027\075\055" +
    "\001\002\000\004\002\174\001\002\000\036\006\uffe5\007" +
    "\uffe5\023\120\024\121\030\uffe5\031\uffe5\036\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\001" +
    "\002\000\050\006\ufffa\007\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\036" +
    "\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\001\002\000\050\006\ufff7\007\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\036\ufff7\037\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\001\002\000\024\002\uffce\006\uffce" +
    "\016\uffce\017\uffce\032\uffce\033\uffce\057\uffce\070\uffce\075" +
    "\uffce\001\002\000\014\017\034\032\007\033\015\057\027" +
    "\075\055\001\002\000\004\006\133\001\002\000\050\006" +
    "\ufff8\007\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\036\ufff8\037\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002" +
    "\000\024\002\uffc8\006\uffc8\016\uffc8\017\uffc8\032\uffc8\033" +
    "\uffc8\057\uffc8\070\uffc8\075\uffc8\001\002\000\024\002\uffc1" +
    "\006\uffc1\016\uffc1\017\uffc1\032\uffc1\033\uffc1\057\uffc1\070" +
    "\uffc1\075\uffc1\001\002\000\024\002\uffd2\006\uffd2\016\uffd2" +
    "\017\uffd2\032\uffd2\033\uffd2\057\uffd2\070\uffd2\075\uffd2\001" +
    "\002\000\014\006\uffd9\007\uffd9\030\162\031\uffd9\037\163" +
    "\001\002\000\022\006\uffdd\007\uffdd\030\uffdd\031\uffdd\036" +
    "\uffdd\037\uffdd\045\142\046\141\001\002\000\024\002\uffcc" +
    "\006\uffcc\016\uffcc\017\uffcc\032\uffcc\033\uffcc\057\uffcc\070" +
    "\uffcc\075\uffcc\001\002\000\050\006\ufff9\007\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\036\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\001\002\000\014\017\034\032" +
    "\007\033\015\057\027\075\055\001\002\000\006\006\uffc0" +
    "\007\157\001\002\000\024\002\uffff\006\021\016\057\017" +
    "\034\032\007\033\015\057\027\070\041\075\055\001\002" +
    "\000\042\006\uffeb\007\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\036\uffeb\037\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\001\002\000\024\002" +
    "\uffc7\006\uffc7\016\uffc7\017\uffc7\032\uffc7\033\uffc7\057\uffc7" +
    "\070\uffc7\075\uffc7\001\002\000\002\001\002\000\004\006" +
    "\133\001\002\000\004\006\133\001\002\000\010\006\uffd7" +
    "\007\uffd7\031\uffd7\001\002\000\004\006\133\001\002\000" +
    "\004\010\145\001\002\000\042\006\uffef\007\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\030\uffef\031\uffef\036\uffef\037" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\001\002\000\016\006\uffdb\007\uffdb\030\uffdb\031\uffdb\036" +
    "\137\037\uffdb\001\002\000\004\006\133\001\002\000\004" +
    "\006\ufffd\001\002\000\006\006\uffd4\007\uffd4\001\002\000" +
    "\024\002\uffc9\006\uffc9\016\uffc9\017\uffc9\032\uffc9\033\uffc9" +
    "\057\uffc9\070\uffc9\075\uffc9\001\002\000\024\002\uffc2\006" +
    "\uffc2\016\uffc2\017\uffc2\032\uffc2\033\uffc2\057\uffc2\070\uffc2" +
    "\075\uffc2\001\002\000\042\006\uffe8\007\uffe8\023\uffe8\024" +
    "\uffe8\025\124\026\123\030\uffe8\031\uffe8\036\uffe8\037\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\001" +
    "\002\000\004\006\133\001\002\000\004\006\133\001\002" +
    "\000\032\006\uffe0\007\uffe0\030\uffe0\031\uffe0\036\uffe0\037" +
    "\uffe0\041\110\042\112\043\111\044\113\045\uffe0\046\uffe0" +
    "\001\002\000\050\006\ufffb\007\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\036\ufffb\037\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\001\002\000\024\002\uffcd\006\uffcd\016\uffcd" +
    "\017\uffcd\032\uffcd\033\uffcd\057\uffcd\070\uffcd\075\uffcd\001" +
    "\002\000\004\101\061\001\002\000\006\006\uffbf\007\106" +
    "\001\002\000\010\006\uffbc\007\uffbc\027\063\001\002\000" +
    "\006\006\uffbe\007\uffbe\001\002\000\020\010\071\034\067" +
    "\035\070\100\065\101\064\102\066\103\073\001\002\000" +
    "\020\006\uffb1\007\uffb1\011\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\001\002\000\020\006\uffb6\007\uffb6\011\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\001\002\000\020\006\uffb8" +
    "\007\uffb8\011\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\001" +
    "\002\000\006\006\uffbb\007\uffbb\001\002\000\006\006\uffba" +
    "\007\uffba\001\002\000\014\010\071\100\065\101\064\102" +
    "\066\103\073\001\002\000\016\006\uffb9\007\uffb9\023\074" +
    "\024\075\025\077\026\076\001\002\000\020\006\uffb7\007" +
    "\uffb7\011\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\001\002" +
    "\000\014\010\071\100\065\101\064\102\066\103\073\001" +
    "\002\000\014\010\071\100\065\101\064\102\066\103\073" +
    "\001\002\000\014\010\071\100\065\101\064\102\066\103" +
    "\073\001\002\000\014\010\071\100\065\101\064\102\066" +
    "\103\073\001\002\000\020\006\uffb3\007\uffb3\011\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\001\002\000\020\006\uffb2" +
    "\007\uffb2\011\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\001" +
    "\002\000\020\006\uffb4\007\uffb4\011\uffb4\023\uffb4\024\uffb4" +
    "\025\077\026\076\001\002\000\020\006\uffb5\007\uffb5\011" +
    "\uffb5\023\uffb5\024\uffb5\025\077\026\076\001\002\000\014" +
    "\011\105\023\074\024\075\025\077\026\076\001\002\000" +
    "\020\006\uffb0\007\uffb0\011\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\001\002\000\004\101\061\001\002\000\006\006" +
    "\uffbd\007\uffbd\001\002\000\014\017\034\032\007\033\015" +
    "\057\027\075\055\001\002\000\014\017\034\032\007\033" +
    "\015\057\027\075\055\001\002\000\014\017\034\032\007" +
    "\033\015\057\027\075\055\001\002\000\014\017\034\032" +
    "\007\033\015\057\027\075\055\001\002\000\036\006\uffe1" +
    "\007\uffe1\023\120\024\121\030\uffe1\031\uffe1\036\uffe1\037" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\001\002\000\046\006\ufff2\007\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\030\ufff2\031\ufff2\032\117\033\116\036\ufff2" +
    "\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\001\002\000\042\006\ufff0\007\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\030\ufff0\031\ufff0\036\ufff0\037\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001\002" +
    "\000\042\006\ufff1\007\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\030\ufff1\031\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002\000\014\017" +
    "\034\032\007\033\015\057\027\075\055\001\002\000\014" +
    "\017\034\032\007\033\015\057\027\075\055\001\002\000" +
    "\042\006\uffe6\007\uffe6\023\uffe6\024\uffe6\025\124\026\123" +
    "\030\uffe6\031\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\001\002\000\014\017\034" +
    "\032\007\033\015\057\027\075\055\001\002\000\014\017" +
    "\034\032\007\033\015\057\027\075\055\001\002\000\042" +
    "\006\uffea\007\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\031\uffea\036\uffea\037\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\001\002\000\042\006\uffe9\007" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9" +
    "\036\uffe9\037\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\001\002\000\042\006\uffe7\007\uffe7\023\uffe7" +
    "\024\uffe7\025\124\026\123\030\uffe7\031\uffe7\036\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\001\002\000\036\006\uffe3\007\uffe3\023\120\024\121\030" +
    "\uffe3\031\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\001\002\000\036\006\uffe2\007" +
    "\uffe2\023\120\024\121\030\uffe2\031\uffe2\036\uffe2\037\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\001" +
    "\002\000\036\006\uffe4\007\uffe4\023\120\024\121\030\uffe4" +
    "\031\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\001\002\000\024\002\ufffc\006\ufffc" +
    "\016\ufffc\017\ufffc\032\ufffc\033\ufffc\057\ufffc\070\ufffc\075" +
    "\ufffc\001\002\000\024\002\uffcf\006\uffcf\016\uffcf\017\uffcf" +
    "\032\uffcf\033\uffcf\057\uffcf\070\uffcf\075\uffcf\001\002\000" +
    "\024\002\uffd0\006\uffd0\016\uffd0\017\uffd0\032\uffd0\033\uffd0" +
    "\057\uffd0\070\uffd0\075\uffd0\001\002\000\024\002\uffc3\006" +
    "\uffc3\016\uffc3\017\uffc3\032\uffc3\033\uffc3\057\uffc3\070\uffc3" +
    "\075\uffc3\001\002\000\014\017\034\032\007\033\015\057" +
    "\027\075\055\001\002\000\022\006\uffdc\007\uffdc\030\uffdc" +
    "\031\uffdc\036\uffdc\037\uffdc\045\142\046\141\001\002\000" +
    "\014\017\034\032\007\033\015\057\027\075\055\001\002" +
    "\000\014\017\034\032\007\033\015\057\027\075\055\001" +
    "\002\000\032\006\uffdf\007\uffdf\030\uffdf\031\uffdf\036\uffdf" +
    "\037\uffdf\041\110\042\112\043\111\044\113\045\uffdf\046" +
    "\uffdf\001\002\000\032\006\uffde\007\uffde\030\uffde\031\uffde" +
    "\036\uffde\037\uffde\041\110\042\112\043\111\044\113\045" +
    "\uffde\046\uffde\001\002\000\004\101\146\001\002\000\004" +
    "\011\147\001\002\000\004\006\ufffe\001\002\000\024\002" +
    "\uffc4\006\uffc4\016\uffc4\017\uffc4\032\uffc4\033\uffc4\057\uffc4" +
    "\070\uffc4\075\uffc4\001\002\000\024\002\uffca\006\uffca\016" +
    "\uffca\017\uffca\032\uffca\033\uffca\057\uffca\070\uffca\075\uffca" +
    "\001\002\000\024\002\uffc6\006\uffc6\016\uffc6\017\uffc6\032" +
    "\uffc6\033\uffc6\057\uffc6\070\uffc6\075\uffc6\001\002\000\050" +
    "\006\ufff3\007\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\036\ufff3\037\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\002\001\002\000\050\006\ufff4\007\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\036\ufff4\037\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\001\002\000\004\002\001\001" +
    "\002\000\014\017\034\032\007\033\015\057\027\075\055" +
    "\001\002\000\006\006\uffd3\007\uffd3\001\002\000\042\006" +
    "\uffee\007\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee" +
    "\031\uffee\036\uffee\037\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\001\002\000\014\017\034\032\007" +
    "\033\015\057\027\075\055\001\002\000\014\017\034\032" +
    "\007\033\015\057\027\075\055\001\002\000\016\006\uffda" +
    "\007\uffda\030\uffda\031\uffda\036\137\037\uffda\001\002\000" +
    "\004\031\166\001\002\000\014\017\034\032\007\033\015" +
    "\057\027\075\055\001\002\000\010\006\uffd8\007\uffd8\031" +
    "\uffd8\001\002\000\024\002\uffd1\006\uffd1\016\uffd1\017\uffd1" +
    "\032\uffd1\033\uffd1\057\uffd1\070\uffd1\075\uffd1\001\002\000" +
    "\042\006\uffec\007\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\036\uffec\037\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\001\002\000\050\006\ufff5" +
    "\007\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\036\ufff5\037\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001\002\000" +
    "\050\006\ufff6\007\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\001\002\000\004\002\000\001\002\000\042\006\uffed\007" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed" +
    "\036\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\001\002\000\024\002\uffc5\006\uffc5\016\uffc5" +
    "\017\uffc5\032\uffc5\033\uffc5\057\uffc5\070\uffc5\075\uffc5\001" +
    "\002\000\014\017\034\032\007\033\015\057\027\075\055" +
    "\001\002\000\014\017\034\032\007\033\015\057\027\075" +
    "\055\001\002\000\010\006\uffd6\007\uffd6\031\uffd6\001\002" +
    "\000\010\006\uffd5\007\uffd5\031\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\112\002\007\003\044\004\052\010\022\011" +
    "\042\012\023\013\053\014\010\015\050\016\031\017\041" +
    "\020\027\021\016\025\045\026\036\030\004\031\011\032" +
    "\025\033\012\041\030\042\021\043\015\044\051\046\013" +
    "\047\055\050\024\051\003\052\035\053\046\054\017\055" +
    "\032\056\034\057\005\060\037\061\043\062\047\001\001" +
    "\000\002\001\001\000\004\040\176\001\001\000\004\045" +
    "\175\001\001\000\020\016\174\017\041\021\016\030\114" +
    "\031\011\032\025\033\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\172\035\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\170\017\041\021" +
    "\016\030\114\031\011\032\025\033\012\001\001\000\004" +
    "\045\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\160\017\041\021\016\030\114\031\011\032\025\033\012" +
    "\001\001\000\002\001\001\000\112\002\155\003\044\004" +
    "\052\010\022\011\042\012\023\013\053\014\010\015\050" +
    "\016\031\017\041\020\027\021\016\025\045\026\036\030" +
    "\004\031\011\032\025\033\012\041\030\042\021\043\015" +
    "\044\051\046\013\047\055\050\024\051\003\052\035\053" +
    "\046\054\017\055\032\056\034\057\005\060\037\061\043" +
    "\062\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\153\037\152\001\001\000\004\045\151\001\001" +
    "\000\004\045\150\001\001\000\002\001\001\000\004\045" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\134\001\001\000\004\045\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\057\006\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\102\001" +
    "\001\000\004\022\101\001\001\000\004\022\100\001\001" +
    "\000\004\022\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\106\001\001\000\002\001" +
    "\001\000\024\014\131\015\050\016\031\017\041\021\016" +
    "\030\114\031\011\032\025\033\012\001\001\000\024\014" +
    "\130\015\050\016\031\017\041\021\016\030\114\031\011" +
    "\032\025\033\012\001\001\000\024\014\127\015\050\016" +
    "\031\017\041\021\016\030\114\031\011\032\025\033\012" +
    "\001\001\000\024\014\113\015\050\016\031\017\041\021" +
    "\016\030\114\031\011\032\025\033\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\126\016\031\017\041\021\016\030\114" +
    "\031\011\032\025\033\012\001\001\000\022\015\121\016" +
    "\031\017\041\021\016\030\114\031\011\032\025\033\012" +
    "\001\001\000\002\001\001\000\020\016\125\017\041\021" +
    "\016\030\114\031\011\032\025\033\012\001\001\000\020" +
    "\016\124\017\041\021\016\030\114\031\011\032\025\033" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\137\013\053\014\010\015" +
    "\050\016\031\017\041\021\016\030\114\031\011\032\025" +
    "\033\012\001\001\000\002\001\001\000\026\013\143\014" +
    "\010\015\050\016\031\017\041\021\016\030\114\031\011" +
    "\032\025\033\012\001\001\000\026\013\142\014\010\015" +
    "\050\016\031\017\041\021\016\030\114\031\011\032\025" +
    "\033\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\022\011\042\012\023\013\053\014" +
    "\010\015\050\016\031\017\041\021\016\025\157\026\036" +
    "\030\004\031\011\032\025\033\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\010\022\011\042\012\023" +
    "\013\053\014\010\015\050\016\031\017\041\021\016\025" +
    "\164\026\036\030\004\031\011\032\025\033\012\001\001" +
    "\000\032\011\163\012\023\013\053\014\010\015\050\016" +
    "\031\017\041\021\016\030\114\031\011\032\025\033\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\010" +
    "\022\011\042\012\023\013\053\014\010\015\050\016\031" +
    "\017\041\021\016\025\166\026\036\030\004\031\011\032" +
    "\025\033\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\010\022\011\042\012\023\013\053\014\010\015\050\016" +
    "\031\017\041\021\016\025\201\026\036\030\004\031\011" +
    "\032\025\033\012\001\001\000\040\010\022\011\042\012" +
    "\023\013\053\014\010\015\050\016\031\017\041\021\016" +
    "\025\200\026\036\030\004\031\011\032\025\033\012\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expression ::= LEFT_ROUND_BRACKET simple_expression RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = e;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_expression ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression(i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_expression ::= simple_expression DIV simple_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression("/", l, r);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_expression ::= simple_expression TIMES simple_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression("*", l, r);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_expression ::= simple_expression MINUS simple_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression("-", l, r);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_expression ::= simple_expression PLUS simple_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression("+", l, r);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_expression ::= STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression(s);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_expression ::= DECIMAL 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression(d);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_expression ::= INTEGRAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expression(i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable_declaration ::= ID EQUAL simple_expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            Variables variables = Variables.getInstance();
            String type = s.evaluateType();
            Object value = s.evaluate();
            Var var = new Var(value, id, type);
            variables.addVariable(var); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_declaration ::= ID EQUAL FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            Variables variables = Variables.getInstance();
            Var var = new Var(f, id, "boolean");
            variables.addVariable(var); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_declaration ::= ID EQUAL TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            Variables variables = Variables.getInstance();
            Var var = new Var(t, id, "boolean");
            variables.addVariable(var); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_declaration ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            Variables variables = Variables.getInstance();
            Var var = new Var(null, id, null);
            variables.addVariable(var); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_declaration_list ::= variable_declaration_list COMMA variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_declaration_list ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_definition ::= VAR variable_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_definition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_statement ::= expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= try_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un try_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= throw_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un throw_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= return_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un return_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= break_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un break_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= continue_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un continue_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= with_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un with_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= for_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un for_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= while_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un while_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= do_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un do_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= switch_statemente 
            {
              Object RESULT =null;
		 System.out.println("Detecte un switch_statemente"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un if_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= labeled_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un labeled_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= block 
            {
              Object RESULT =null;
		 System.out.println("Detecte un block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= variable_definition optional_semicolon 
            {
              Object RESULT =null;
		 /* System.out.println("Detecte un variable_definition"); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= expression_statement optional_semicolon 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= known_function optional_semicolon 
            {
              Object RESULT =null;
		 /* System.out.println("Detecte un known_function"); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= empty_statement 
            {
              Object RESULT =null;
		 System.out.println("Detecte un empty_statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression COMMA assignment_expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un expression COMMA assignment_expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= assignment_expression 
            {
              Object RESULT =null;
		 System.out.println("Detecte un assignment_expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment_expression ::= left_side_expression compound_assignment assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment_expression ::= left_side_expression EQUAL assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment_expression ::= conditional_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conditional_expression ::= logical_or_expression QUEST assignment_expression COLON assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conditional_expression ::= logical_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logical_or_expression ::= logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logical_and_expression ::= logical_and_expression AND equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logical_and_expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // equality_expression ::= equality_expression NOT_EQUAL relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // equality_expression ::= equality_expression EQUAL_EQUAL relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relational_expression ::= relational_expression LESS_EQUAL additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relational_expression ::= relational_expression GREATER_EQUAL additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relational_expression ::= relational_expression LESS additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relational_expression ::= additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multiplicative_expression ::= multiplicative_expression TIMES unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multiplicative_expression ::= unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_expression ::= DECREMENT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_expression ::= INCREMENT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_expression ::= TYPEOF_FUNCT unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_expression ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // postfix_expression ::= left_side_expression DECREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // postfix_expression ::= left_side_expression INCREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // postfix_expression ::= left_side_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // short_new_expression ::= NEW short_new_subexpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_new_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // full_new_expression ::= NEW full_new_subexpression arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_new_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // call_expression ::= call_expression arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // call_expression ::= call_expression member_operator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // call_expression ::= full_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // call_expression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // left_side_expression ::= short_new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // left_side_expression ::= call_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // left_side_expression ::= NAN 
            {
              Object RESULT =null;
		 System.out.println("Estoy en la POSTAAA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_side_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_semicolon ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_semicolon",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // known_function ::= console_log 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("known_function",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // console_log ::= CONSOLE_LOG LEFT_ROUND_BRACKET ID RIGHT_ROUND_BRACKET 
            {
              Object RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String var_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            Variables variables = Variables.getInstance();
            Var var = variables.getVariableByName(var_name);
            ConsoleLog cl = new ConsoleLog((String)var.getValue());
            cl.execute();
            
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_log",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // main ::= statement main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

